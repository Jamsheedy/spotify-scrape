{
	"name": "Notebook 1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "medspark0",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "41a3b1bc-9022-4fb7-979b-2bd5ddd28a13"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/6cb2d3f3-d909-494e-8c69-03fc31778b22/resourceGroups/spotify-fam/providers/Microsoft.Synapse/workspaces/spotify-scrape-dev/bigDataPools/medspark0",
				"name": "medspark0",
				"type": "Spark",
				"endpoint": "https://spotify-scrape-dev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/medspark0",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"_FILE_PATH = \"abfss://raw@spotifyfam.dfs.core.windows.net/sleeper/players/players_992125474790772736_2024-07-17T03:40:50.3694529Z.json\"\r\n",
					"\r\n",
					"json_str = spark.read.text(_FILE_PATH).collect()"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Join the lines of text to form the full JSON string\r\n",
					"json_str = ''.join([row.value for row in json_str])\r\n",
					"\r\n",
					"# Parse the JSON string using Python's json library\r\n",
					"import json\r\n",
					"data = json.loads(json_str)\r\n",
					"\r\n",
					"# Now you can manipulate the data as a Python dictionary\r\n",
					"\r\n",
					"data = [v for k, v in data.items() if isinstance(v, dict) and 'player_id' in v.keys()]\r\n",
					"# data = [row for row in data if isinstance(row, dict) and 'player_id' in row.keys()]"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"type(data)"
				],
				"execution_count": 32
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.types import StructType, StructField, StringType, IntegerType, BooleanType, ArrayType, LongType, StructType\r\n",
					"\r\n",
					"schema = StructType([\r\n",
					"    StructField(\"birth_state\", StringType(), True),\r\n",
					"    StructField(\"opta_id\", StringType(), True),\r\n",
					"    StructField(\"pandascore_id\", StringType(), True),\r\n",
					"    StructField(\"injury_status\", StringType(), True),\r\n",
					"    StructField(\"espn_id\", IntegerType(), True),  # Integer now\r\n",
					"    StructField(\"position\", StringType(), True),  # WR, String\r\n",
					"    StructField(\"news_updated\", LongType(), True),  # Timestamp in ms\r\n",
					"    StructField(\"sport\", StringType(), True),\r\n",
					"    StructField(\"fantasy_data_id\", IntegerType(), True),\r\n",
					"    StructField(\"sportradar_id\", StringType(), True),\r\n",
					"    StructField(\"team\", StringType(), True),\r\n",
					"    StructField(\"birth_date\", StringType(), True),  # String but represents a date\r\n",
					"    StructField(\"team_abbr\", StringType(), True),\r\n",
					"    StructField(\"gsis_id\", StringType(), True),  # gsis_id as String\r\n",
					"    StructField(\"rotoworld_id\", IntegerType(), True),\r\n",
					"    StructField(\"injury_start_date\", StringType(), True),\r\n",
					"    StructField(\"depth_chart_position\", StringType(), True),\r\n",
					"    StructField(\"search_rank\", IntegerType(), True),\r\n",
					"    StructField(\"practice_participation\", StringType(), True),\r\n",
					"    StructField(\"player_id\", StringType(), True),\r\n",
					"    StructField(\"yahoo_id\", IntegerType(), True),  # Integer now\r\n",
					"    StructField(\"stats_id\", IntegerType(), True),  # Integer now\r\n",
					"    StructField(\"search_full_name\", StringType(), True),\r\n",
					"    StructField(\"search_first_name\", StringType(), True),\r\n",
					"    StructField(\"practice_description\", StringType(), True),\r\n",
					"    StructField(\"number\", IntegerType(), True),  # Integer\r\n",
					"    StructField(\"injury_body_part\", StringType(), True),\r\n",
					"    StructField(\"oddsjam_id\", StringType(), True),\r\n",
					"    StructField(\"depth_chart_order\", StringType(), True),\r\n",
					"    StructField(\"swish_id\", IntegerType(), True),  # Integer now\r\n",
					"    StructField(\"first_name\", StringType(), True),\r\n",
					"    StructField(\"age\", IntegerType(), True),  # Age as Integer\r\n",
					"    StructField(\"status\", StringType(), True),\r\n",
					"    StructField(\"height\", StringType(), True),  # Keep as String for now\r\n",
					"    StructField(\"high_school\", StringType(), True),\r\n",
					"    StructField(\"birth_country\", StringType(), True),\r\n",
					"    StructField(\"metadata\", StructType([              # Struct for metadata\r\n",
					"        StructField(\"rookie_year\", StringType(), True),\r\n",
					"        StructField(\"channel_id\", StringType(), True)\r\n",
					"    ]), True),\r\n",
					"    StructField(\"weight\", StringType(), True),  # Keep as String for now\r\n",
					"    StructField(\"years_exp\", IntegerType(), True),  # Integer for experience\r\n",
					"    StructField(\"search_last_name\", StringType(), True),\r\n",
					"    StructField(\"rotowire_id\", IntegerType(), True),\r\n",
					"    StructField(\"full_name\", StringType(), True),\r\n",
					"    StructField(\"injury_notes\", StringType(), True),\r\n",
					"    StructField(\"active\", BooleanType(), True),  # Boolean\r\n",
					"    StructField(\"hashtag\", StringType(), True),\r\n",
					"    StructField(\"last_name\", StringType(), True),\r\n",
					"    StructField(\"college\", StringType(), True),\r\n",
					"    StructField(\"fantasy_positions\", ArrayType(StringType()), True),  # Array of Strings\r\n",
					"    StructField(\"competitions\", ArrayType(StringType()), True),  # Empty array\r\n",
					"    StructField(\"birth_city\", StringType(), True)\r\n",
					"])"
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = spark.createDataFrame(data=data, schema=schema)"
				],
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(df.select('player_id', 'search_first_name', 'search_last_name', 'status', 'team'))"
				],
				"execution_count": 37
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df.write.mode('append').parquet('abfss://raw@spotifyfam.dfs.core.windows.net/sleeper/players_parquet/')"
				],
				"execution_count": 39
			}
		]
	}
}