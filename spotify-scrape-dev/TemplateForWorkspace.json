{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "spotify-scrape-dev"
		},
		"Sheets_apiToken": {
			"type": "secureString",
			"metadata": "Secure string for 'apiToken' of 'Sheets'"
		},
		"gcs_secretAccessKey": {
			"type": "secureString",
			"metadata": "Secure string for 'secretAccessKey' of 'gcs'"
		},
		"google_sheets_apiToken": {
			"type": "secureString",
			"metadata": "Secure string for 'apiToken' of 'google_sheets'"
		},
		"spotify-scrape-dev-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'spotify-scrape-dev-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:spotify-scrape-dev.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"adls_bqtest_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://testbq.dfs.core.windows.net/"
		},
		"gcs_properties_typeProperties_accessKeyId": {
			"type": "string",
			"defaultValue": "GOOGK2PC5N3RW5PMZMTKMAM7"
		},
		"ls_clash_restapi_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.clashofclans.com/v1/"
		},
		"ls_kv_appcreds_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://app-creds.vault.azure.net/"
		},
		"ls_premtracker_bbcpremstandings_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://www.bbc.com/"
		},
		"ls_webtbl_premtable_skysports_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://www.skysports.com/premier-league-table"
		},
		"previous_premlake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://premlake.dfs.core.windows.net/"
		},
		"spotify-scrape-dev-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://spotifyfam.dfs.core.windows.net"
		},
		"clash_s2r_cdc_properties_clash_s2r_cdc_parameters_SRC_DIR": {
			"type": "string",
			"defaultValue": "@triggerBody().folderPath"
		},
		"clash_s2r_cdc_properties_clash_s2r_cdc_parameters_SRC_FILE_NM": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"clash_s2r_cdc_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/6cb2d3f3-d909-494e-8c69-03fc31778b22/resourceGroups/spotify-fam/providers/Microsoft.Storage/storageAccounts/spotifyfam"
		},
		"clash_s_r_pullClan_properties_pullClanData_parameters_CLAN_TAG": {
			"type": "string",
			"defaultValue": "#P02CUUUU"
		},
		"tr_premtracker_master_properties_pl_premtracker_standings_master_parameters_YEAR": {
			"type": "string",
			"defaultValue": "2025"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/clash_s2r_cdc')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "s2r_cdc",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "set TGT_TBL_NM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 3,
							"retryIntervalInSeconds": 60,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "s2r_cdc",
								"type": "NotebookReference"
							},
							"parameters": {
								"SRC_DIR": {
									"value": {
										"value": "@pipeline().parameters.SRC_DIR",
										"type": "Expression"
									},
									"type": "string"
								},
								"SRC_FILE_NM": {
									"value": {
										"value": "@pipeline().parameters.SRC_FILE_NM",
										"type": "Expression"
									},
									"type": "string"
								},
								"TGT_TBL_NM": {
									"value": {
										"value": "@variables('TGT_TBL_NM')",
										"type": "Expression"
									},
									"type": "string"
								}
							},
							"snapshot": true,
							"sparkPool": {
								"referenceName": "smallspark33",
								"type": "BigDataPoolReference"
							},
							"executorSize": "Small",
							"conf": {
								"spark.dynamicAllocation.enabled": false,
								"spark.dynamicAllocation.minExecutors": 1,
								"spark.dynamicAllocation.maxExecutors": 1
							},
							"driverSize": "Small",
							"numExecutors": 1
						}
					},
					{
						"name": "set TGT_TBL_NM",
						"description": "parse for the directory of inbound file",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "TGT_TBL_NM",
							"value": {
								"value": "@substring(\n    pipeline().parameters.SRC_DIR,\n    add(lastindexof(pipeline().parameters.SRC_DIR, '/'), 1),\n    sub(\n        sub(\n            length(pipeline().parameters.SRC_DIR),\n            1),\n    lastindexof(pipeline().parameters.SRC_DIR, '/')\n    )\n)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SRC_DIR": {
						"type": "string",
						"defaultValue": "clash/stg/cwl"
					},
					"SRC_FILE_NM": {
						"type": "string",
						"defaultValue": "clandata_2023-05-27T12:00:26.4776262Z.json"
					}
				},
				"variables": {
					"TGT_TBL_NM": {
						"type": "String"
					}
				},
				"folder": {
					"name": "clash/etl/s2r"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/s2r_cdc')]",
				"[concat(variables('workspaceId'), '/bigDataPools/smallspark33')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/clash_s2r_cdc_copy1')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "pr2r",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_pr2r",
								"type": "DataFlowReference",
								"parameters": {
									"TGT_FILE_SYS": {
										"value": "'@{pipeline().parameters.TGT_FILE_SYS}'",
										"type": "Expression"
									},
									"TGT_DIR_LOC": {
										"value": "'@{concat(\n    pipeline().parameters.TGT_DIR,\n    '/',\n    pipeline().parameters.TGT_FILE_NM\n)}'",
										"type": "Expression"
									},
									"SRC_FILE_SYS": {
										"value": "'@{pipeline().parameters.SRC_FILE_SYS}'",
										"type": "Expression"
									},
									"SRC_DIR_LOC": {
										"value": "'@{concat(\n    pipeline().parameters.SRC_DIR,\n    '/',\n    pipeline().parameters.SRC_FILE_NM\n)}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse",
							"continuationSettings": {
								"customizedCheckpointKey": "4f115e66-f48e-46fd-9b0e-faeed410bf28"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SRC_FILE_SYS": {
						"type": "string",
						"defaultValue": "clash"
					},
					"SRC_DIR": {
						"type": "string",
						"defaultValue": "stg"
					},
					"SRC_FILE_NM": {
						"type": "string",
						"defaultValue": "cwl"
					},
					"TGT_FILE_SYS": {
						"type": "string",
						"defaultValue": "clash"
					},
					"TGT_DIR": {
						"type": "string",
						"defaultValue": "deltalake/raw"
					},
					"TGT_FILE_NM": {
						"type": "string",
						"defaultValue": "cwl"
					}
				},
				"variables": {
					"TGT_TBL_NM": {
						"type": "String"
					}
				},
				"folder": {
					"name": "clash/etl/s2r/generic"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/df_pr2r')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/etl')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "clan Delta",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "pr2r",
								"type": "DataFlowReference",
								"parameters": {
									"SRC_DIR": "'clash'",
									"SRC_FN": "'stg/clan'",
									"TGT_DIR": "'deltalake/raw/clans/'"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse",
							"continuationSettings": {
								"customizedCheckpointKey": "f4b0e374-6a9f-49c2-a355-45ff1787c316"
							}
						}
					},
					{
						"name": "player Delta",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "pr2r",
								"type": "DataFlowReference",
								"parameters": {
									"SRC_DIR": "'clash'",
									"SRC_FN": "'stg/player'",
									"TGT_DIR": "'deltalake/raw/player/'"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse",
							"continuationSettings": {
								"customizedCheckpointKey": "f4b0e374-6a9f-49c2-a355-45ff1787c316"
							}
						}
					},
					{
						"name": "wars Delta",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "pr2r",
								"type": "DataFlowReference",
								"parameters": {
									"SRC_DIR": "'clash'",
									"SRC_FN": "'stg/wars'",
									"TGT_DIR": "'deltalake/raw/wars/'"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse",
							"continuationSettings": {
								"customizedCheckpointKey": "f4b0e374-6a9f-49c2-a355-45ff1787c316"
							}
						}
					},
					{
						"name": "cwl Delta",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "pr2r",
								"type": "DataFlowReference",
								"parameters": {
									"SRC_DIR": "'clash'",
									"SRC_FN": "'cwl'",
									"TGT_DIR": "'deltalake/raw/cwl/'"
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse",
							"continuationSettings": {
								"customizedCheckpointKey": "f4b0e374-6a9f-49c2-a355-45ff1787c316"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "clash/etl/raw"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/pr2r')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_api')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "s_pr_api",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"additionalColumns": [
									{
										"name": "api_call_ts",
										"value": {
											"value": "@pipeline().parameters.JOB_TIME",
											"type": "Expression"
										}
									}
								],
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings",
									"filePattern": "setOfObjects"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "RestResource1",
								"type": "DatasetReference",
								"parameters": {
									"URL_REL": {
										"value": "@replace(pipeline().parameters.SRC_REL_URL, '#', '%23')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "clan_ds_json",
								"type": "DatasetReference",
								"parameters": {
									"TGT_DIR": {
										"value": "@pipeline().parameters.TGT_DIR",
										"type": "Expression"
									},
									"TGT_FILE_NM": {
										"value": "@pipeline().parameters.TGT_FILE_NM",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SRC_REL_URL": {
						"type": "string",
						"defaultValue": "clans/%23P02CUUUU"
					},
					"TGT_DIR": {
						"type": "string",
						"defaultValue": "clash/clan/"
					},
					"TGT_FILE_NM": {
						"type": "string",
						"defaultValue": "test_result.json"
					},
					"JOB_TIME": {
						"type": "string"
					}
				},
				"folder": {
					"name": "clash/api"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/RestResource1')]",
				"[concat(variables('workspaceId'), '/datasets/clan_ds_json')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_ping_program')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "run program",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@concat(pipeline().parameters.BASE_URL, pipeline().parameters.APP_URL)",
								"type": "Expression"
							},
							"connectVia": {
								"referenceName": "clash-SHIR-laptop",
								"type": "IntegrationRuntimeReference"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"BASE_URL": {
						"type": "string",
						"defaultValue": "http://127.0.0.1:5000"
					},
					"APP_URL": {
						"type": "string",
						"defaultValue": "/turkey_visa_status"
					}
				},
				"folder": {
					"name": "appserver"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/clash-SHIR-laptop')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_premtracker_s2r_draftboard')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "raw_draftboard",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_premtracker_draftboard_s2r",
								"type": "DataFlowReference",
								"parameters": {
									"YEAR": {
										"value": "'@{pipeline().parameters.YEAR}'",
										"type": "Expression"
									},
									"SHEET_ID": {
										"value": "'@{pipeline().parameters.SHEET_ID}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"YEAR": {
						"type": "string",
						"defaultValue": "2025"
					},
					"SHEET_ID": {
						"type": "string",
						"defaultValue": "1jxF36Yn58fIGiQaJmXza5t1IYXHzmr_spYNqi-GRfYc"
					}
				},
				"folder": {
					"name": "premtracker/s2r/draftboard"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/df_premtracker_draftboard_s2r')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pl_premtracker_standings_master')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "LU_InboundTable",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:05:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "WebSource"
							},
							"dataset": {
								"referenceName": "ds_webtbl_bbcprem",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set GamesPlayed",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LU_InboundTable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "GAMES_PLAYED",
							"value": {
								"value": "@string(\n    add(\n        int(activity('LU_InboundTable').output.value[0].Played),\n        add(\n            int(activity('LU_InboundTable').output.value[1].Played),\n            add(\n                int(activity('LU_InboundTable').output.value[2].Played),\n                add(\n                    int(activity('LU_InboundTable').output.value[3].Played),\n                    add(\n                        int(activity('LU_InboundTable').output.value[4].Played),\n                        add(\n                            int(activity('LU_InboundTable').output.value[5].Played),\n                            add(\n                                int(activity('LU_InboundTable').output.value[6].Played),\n                                add(\n                                    int(activity('LU_InboundTable').output.value[7].Played),\n                                    add(\n                                        int(activity('LU_InboundTable').output.value[8].Played), \n                                        add(\n                                            int(activity('LU_InboundTable').output.value[9].Played),\n                                            add(\n                                                int(activity('LU_InboundTable').output.value[10].Played),\n                                                add(\n                                                    int(activity('LU_InboundTable').output.value[11].Played),\n                                                    add(\n                                                        int(activity('LU_InboundTable').output.value[12].Played),\n                                                        add(\n                                                            int(activity('LU_InboundTable').output.value[13].Played),\n                                                            add(\n                                                                int(activity('LU_InboundTable').output.value[14].Played),\n                                                                add(\n                                                                    int(activity('LU_InboundTable').output.value[15].Played),\n                                                                    add(\n                                                                        int(activity('LU_InboundTable').output.value[16].Played),\n                                                                        add(\n                                                                            int(activity('LU_InboundTable').output.value[17].Played),\n                                                                            add(\n                                                                                int(activity('LU_InboundTable').output.value[18].Played), \n                                                                                int(activity('LU_InboundTable').output.value[19].Played)\n                                                                                )\n                                                                            )\n                                                                        )\n                                                                    )\n                                                                )\n                                                            )\n                                                        )\n                                                    )\n                                                )\n                                            )\n                                        )\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )    \n            )\n        )\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LU Last Game Count",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "If No Game Count Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ds_csv_gen",
								"type": "DatasetReference",
								"parameters": {
									"FILE_SYS": "premtracker",
									"DIR": {
										"value": "@concat(\n    'stg/gamecount/',\n    pipeline().parameters.YEAR\n)",
										"type": "Expression"
									},
									"FILE_NM": "base.csv"
								}
							}
						}
					},
					{
						"name": "If New Games Get Data",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set GamesPlayed",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LU Last Game Count",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(\n    int(variables('GAMES_PLAYED')),\n    int(activity('LU Last Game Count').output.firstRow.LastGameCount)\n)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy Prem Table",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:05:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "WebSource",
											"additionalColumns": [
												{
													"name": "currentTs",
													"value": {
														"value": "@formatDateTime(utcnow(), 'yyyy.MM.dd HH:mm:ss')",
														"type": "Expression"
													}
												},
												{
													"name": "season",
													"value": {
														"value": "@pipeline().parameters.YEAR",
														"type": "Expression"
													}
												}
											]
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Team",
														"type": "String"
													},
													"sink": {
														"name": "Team",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "Played"
													},
													"sink": {
														"name": "Pl",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "Won"
													},
													"sink": {
														"name": "W",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "Drawn"
													},
													"sink": {
														"name": "D",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "Lost"
													},
													"sink": {
														"name": "L",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "Goals For"
													},
													"sink": {
														"name": "F",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "Goals Against"
													},
													"sink": {
														"name": "A",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "Goal Difference"
													},
													"sink": {
														"name": "GD",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "Points"
													},
													"sink": {
														"name": "Pts",
														"type": "String",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "currentTs",
														"type": "String"
													},
													"sink": {
														"name": "current_ts",
														"physicalType": "String"
													}
												},
												{
													"source": {
														"name": "season",
														"type": "String"
													},
													"sink": {
														"name": "season",
														"type": "String",
														"physicalType": "String"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": false,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_webtbl_bbcprem",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_csv_gen",
											"type": "DatasetReference",
											"parameters": {
												"FILE_SYS": "premtracker",
												"DIR": {
													"value": "@concat(\n    'stg/table/',\n    pipeline().parameters.YEAR,\n    '/inbound'\n)",
													"type": "Expression"
												},
												"FILE_NM": {
													"value": "@concat('table-', utcNow(), '.csv')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Update Last Game Count",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copy Prem Table",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:05:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"additionalColumns": [
												{
													"name": "NewGameCount",
													"value": {
														"value": "@variables('GAMES_PLAYED')",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "NewGameCount",
														"type": "String"
													},
													"sink": {
														"name": "LastGameCount",
														"type": "String",
														"physicalType": "String"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_csv_gen",
											"type": "DatasetReference",
											"parameters": {
												"FILE_SYS": "premtracker",
												"DIR": "stg/gamecount",
												"FILE_NM": "base.csv"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_csv_gen",
											"type": "DatasetReference",
											"parameters": {
												"FILE_SYS": "premtracker",
												"DIR": {
													"value": "@concat(\n    'stg/gamecount/',\n    pipeline().parameters.YEAR\n)",
													"type": "Expression"
												},
												"FILE_NM": "base.csv"
											}
										}
									]
								},
								{
									"name": "raw_table",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "Update Last Game Count",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "df_premtracker_table_s2r",
											"type": "DataFlowReference",
											"parameters": {
												"YEAR": {
													"value": "'@{pipeline().parameters.YEAR}'",
													"type": "Expression"
												}
											},
											"datasetParameters": {
												"source1": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								},
								{
									"name": "r2f",
									"type": "ExecuteDataFlow",
									"dependsOn": [
										{
											"activity": "raw_table",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "df_premtracker_r2f_mock1",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"table": {},
												"draftboard": {},
												"sink1": {}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "None",
										"cacheSinks": {
											"firstRowOnly": true
										},
										"continuationSettings": {
											"customizedCheckpointKey": "b7a30d6d-5e7f-4aa0-912e-00f322356ecd"
										}
									}
								}
							]
						}
					},
					{
						"name": "check Game Count Exists",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "ds_csv_gen",
								"type": "DatasetReference",
								"parameters": {
									"FILE_SYS": "premtracker",
									"DIR": {
										"value": "@concat(\n    'stg/gamecount/',\n    pipeline().parameters.YEAR\n)",
										"type": "Expression"
									},
									"FILE_NM": "base.csv"
								}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "If No Game Count Exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "check Game Count Exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('check Game Count Exists').output.exists",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set Last Game Count 0",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:05:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_csv_gen",
											"type": "DatasetReference",
											"parameters": {
												"FILE_SYS": "premtracker",
												"DIR": "stg/gamecount",
												"FILE_NM": "base.csv"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_csv_gen",
											"type": "DatasetReference",
											"parameters": {
												"FILE_SYS": "premtracker",
												"DIR": {
													"value": "@concat(\n    'stg/gamecount/',\n    pipeline().parameters.YEAR\n)",
													"type": "Expression"
												},
												"FILE_NM": "base.csv"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"YEAR": {
						"type": "string",
						"defaultValue": "2025"
					}
				},
				"variables": {
					"GAMES_PLAYED": {
						"type": "String",
						"defaultValue": "200"
					}
				},
				"folder": {
					"name": "premtracker"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ds_webtbl_bbcprem')]",
				"[concat(variables('workspaceId'), '/datasets/ds_csv_gen')]",
				"[concat(variables('workspaceId'), '/dataflows/df_premtracker_table_s2r')]",
				"[concat(variables('workspaceId'), '/dataflows/df_premtracker_r2f_mock1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pr2r_master')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.SRC_STG_FOLDERS",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 3,
							"activities": [
								{
									"name": "pr2r",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "clash_s2r_cdc_copy1",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"SRC_FILE_SYS": "clash",
											"SRC_DIR": "stg",
											"SRC_FILE_NM": {
												"value": "@item()",
												"type": "Expression"
											},
											"TGT_FILE_SYS": "clash",
											"TGT_DIR": "deltalake/raw",
											"TGT_FILE_NM": {
												"value": "@item()",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"SRC_STG_FOLDERS": {
						"type": "array",
						"defaultValue": [
							"clan",
							"cwl",
							"cwl_wars",
							"player",
							"wars"
						]
					}
				},
				"folder": {
					"name": "clash/etl/s2r/generic"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/clash_s2r_cdc_copy1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/premtracker_move_archive')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy_kcs",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "premtracker/stg/table/2023/archive/"
							},
							{
								"name": "Destination",
								"value": "premtracker/stg/table/2023/inbound/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								}
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": false,
							"skipErrorFile": {
								"fileMissing": true
							},
							"validateDataConsistency": false
						},
						"inputs": [
							{
								"referenceName": "SourceDataset_kcs",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationDataset_kcs",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "premtracker"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/SourceDataset_kcs')]",
				"[concat(variables('workspaceId'), '/datasets/DestinationDataset_kcs')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pullCWLWar')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Each War Tag",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.WAR_TAGS",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Check NonActive WarTag",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item(), '#0')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "pullCurrentCWLWar_copy1",
												"description": "call clash api /clans for given CLAN_TAG param",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "pl_api",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"SRC_REL_URL": {
															"value": "@concat(\n    'clanwarleagues/wars/',\n    item()\n)",
															"type": "Expression"
														},
														"TGT_DIR": "clash/stg/cwl_wars/",
														"TGT_FILE_NM": {
															"value": "@concat(\n    'cwlwardata_',\n    utcnow(),\n    '.json'\n)",
															"type": "Expression"
														},
														"JOB_TIME": {
															"value": "@pipeline().parameters.JOB_TIME",
															"type": "Expression"
														}
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"WAR_TAGS": {
						"type": "array",
						"defaultValue": [
							"#88PG8JUVP",
							"#88PG8C2QU",
							"#88PG8C09G",
							"#88PG8C8U8"
						]
					},
					"JOB_TIME": {
						"type": "string"
					}
				},
				"folder": {
					"name": "clash/pull/endpoints"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pl_api')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pullClan')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "pullClan",
						"description": "call clash api /clans for given CLAN_TAG param",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_api",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SRC_REL_URL": {
									"value": "@concat(\n    'clans/',\n    pipeline().parameters.CLAN_TAG\n)",
									"type": "Expression"
								},
								"TGT_DIR": "clash/stg/clan/",
								"TGT_FILE_NM": {
									"value": "@concat(\n    'clandata_',\n    utcnow(),\n    '.json'\n)",
									"type": "Expression"
								},
								"JOB_TIME": {
									"value": "@pipeline().parameters.JOB_TIME",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"CLAN_TAG": {
						"type": "string",
						"defaultValue": "#P02CUUUU"
					},
					"JOB_TIME": {
						"type": "string"
					}
				},
				"variables": {
					"JOB_START_TIME": {
						"type": "String"
					}
				},
				"folder": {
					"name": "clash/pull/endpoints"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pl_api')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pullClanData')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "pullClan",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "set JobStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pullClan",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"CLAN_TAG": {
									"value": "@pipeline().parameters.CLAN_TAG",
									"type": "Expression"
								},
								"JOB_TIME": {
									"value": "@variables('JOB_START_TIME')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "pullCurrentCWL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "set JobStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pullCwl",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"CLAN_TAG": {
									"value": "@pipeline().parameters.CLAN_TAG",
									"type": "Expression"
								},
								"JOB_TIME": {
									"value": "@variables('JOB_START_TIME')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "pullCurrentWar",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "set JobStart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pullWar",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"CLAN_TAG": {
									"value": "@pipeline().parameters.CLAN_TAG",
									"type": "Expression"
								},
								"JOB_TIME": {
									"value": "@variables('JOB_START_TIME')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "set JobStart",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "JOB_START_TIME",
							"value": {
								"value": "@utcNow()",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"CLAN_TAG": {
						"type": "string",
						"defaultValue": "#P02CUUUU"
					}
				},
				"variables": {
					"JOB_START_TIME": {
						"type": "String"
					}
				},
				"folder": {
					"name": "clash/pull"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pullClan')]",
				"[concat(variables('workspaceId'), '/pipelines/pullCwl')]",
				"[concat(variables('workspaceId'), '/pipelines/pullWar')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pullClanDeep')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "pullClan",
						"description": "call clash api /clans for given CLAN_TAG param",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "set OutFileNM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_api",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SRC_REL_URL": {
									"value": "@concat(\n    'clans/',\n    pipeline().parameters.CLAN_TAG\n)",
									"type": "Expression"
								},
								"TGT_DIR": "clash/clan/",
								"TGT_FILE_NM": {
									"value": "@variables('OUT_FILE_NAME')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "LookupClanMembers",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "pullClan",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "clan_ds_json",
								"type": "DatasetReference",
								"parameters": {
									"TGT_DIR": "clash/clan/",
									"TGT_FILE_NM": {
										"value": "@variables('OUT_FILE_NAME')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "set OutFileNM",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "OUT_FILE_NAME",
							"value": {
								"value": "@concat(\n    'clandata_',\n    utcnow(),\n    '.json'\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach ClanMember",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "set ClanMembers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('CLAN_MEMBERS')",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "pullPlayer",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pullPlayer",
											"type": "PipelineReference"
										},
										"waitOnCompletion": false,
										"parameters": {
											"PLAYER_TAG": {
												"value": "@item().tag",
												"type": "Expression"
											},
											"JOB_TIME": {
												"value": "@pipeline().parameters.JOB_TIME",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "set ClanMembers",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupClanMembers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "CLAN_MEMBERS",
							"value": {
								"value": "@activity('LookupClanMembers').output.value[0].memberList",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"CLAN_TAG": {
						"type": "string",
						"defaultValue": "#P02CUUUU"
					},
					"JOB_TIME": {
						"type": "string"
					}
				},
				"variables": {
					"OUT_FILE_NAME": {
						"type": "String",
						"defaultValue": "clandata_2023-05-21T05:28:18.1963747Z.json"
					},
					"CLAN_MEMBERS": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "clash/pull/endpoints"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pl_api')]",
				"[concat(variables('workspaceId'), '/datasets/clan_ds_json')]",
				"[concat(variables('workspaceId'), '/pipelines/pullPlayer')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pullCwl')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "pullCurrentCWL",
						"description": "call clash api /clans for given CLAN_TAG param",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "set OutFileNM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_api",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SRC_REL_URL": {
									"value": "@concat(\n    'clans/',\n    pipeline().parameters.CLAN_TAG,\n    '/currentwar/leaguegroup'\n)",
									"type": "Expression"
								},
								"TGT_DIR": "clash/stg/cwl/",
								"TGT_FILE_NM": {
									"value": "@variables('OUT_FILE_NAME')",
									"type": "Expression"
								},
								"JOB_TIME": {
									"value": "@pipeline().parameters.JOB_TIME",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "LookupCWLRounds",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "pullCurrentCWL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "clan_ds_json",
								"type": "DatasetReference",
								"parameters": {
									"TGT_DIR": "clash/stg/cwl/",
									"TGT_FILE_NM": {
										"value": "@variables('OUT_FILE_NAME')",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "set OutFileNM",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "OUT_FILE_NAME",
							"value": {
								"value": "@concat(\n    'clandata_',\n    utcnow(),\n    '.json'\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach CWL_ROUND",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "set CWL_ROUNDS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('CWL_ROUNDS')",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "pullCurrentCWLWar",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pullCWLWar",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"WAR_TAGS": {
												"value": "@item().warTags",
												"type": "Expression"
											},
											"JOB_TIME": {
												"value": "@pipeline().parameters.JOB_TIME",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "set CWL_ROUNDS",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LookupCWLRounds",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "CWL_ROUNDS",
							"value": {
								"value": "@activity('LookupCWLRounds').output.value[0].rounds",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"CLAN_TAG": {
						"type": "string",
						"defaultValue": "#P02CUUUU"
					},
					"JOB_TIME": {
						"type": "string"
					}
				},
				"variables": {
					"OUT_FILE_NAME": {
						"type": "String",
						"defaultValue": "clandata_2023-05-21T05:28:18.1963747Z.json"
					},
					"CWL_ROUNDS": {
						"type": "Array"
					},
					"WAR_TAGS_ARRAY": {
						"type": "String"
					}
				},
				"folder": {
					"name": "clash/pull/endpoints"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pl_api')]",
				"[concat(variables('workspaceId'), '/datasets/clan_ds_json')]",
				"[concat(variables('workspaceId'), '/pipelines/pullCWLWar')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pullMembers')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "pullPlayers",
						"description": "call clash api /clans for given CLAN_TAG param",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_api",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SRC_REL_URL": {
									"value": "@concat(\n    'clans/',\n    pipeline().parameters.CLAN_TAG,\n    '/members/'\n)",
									"type": "Expression"
								},
								"TGT_DIR": "clash/stg/players/",
								"TGT_FILE_NM": {
									"value": "@concat(\n    'membersdata_',\n    utcnow(),\n    '.json'\n)",
									"type": "Expression"
								},
								"JOB_TIME": {
									"value": "@pipeline().parameters.JOB_TIME",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"CLAN_TAG": {
						"type": "string",
						"defaultValue": "#P02CUUUU"
					},
					"JOB_TIME": {
						"type": "string"
					}
				},
				"folder": {
					"name": "clash/pull/endpoints"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pl_api')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pullPlayer')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "pullPlayer",
						"description": "call clash api /clans for given CLAN_TAG param",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_api",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SRC_REL_URL": {
									"value": "@concat(\n    'players/',\n    pipeline().parameters.PLAYER_TAG\n)",
									"type": "Expression"
								},
								"TGT_DIR": "clash/stg/player/",
								"TGT_FILE_NM": {
									"value": "@concat(\n    'player_',\n    utcnow(),\n    '.json'\n)",
									"type": "Expression"
								},
								"JOB_TIME": {
									"value": "@pipeline().parameters.JOB_TIME",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PLAYER_TAG": {
						"type": "string",
						"defaultValue": "#YJV2882JL"
					},
					"JOB_TIME": {
						"type": "string"
					}
				},
				"folder": {
					"name": "clash/pull/endpoints"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pl_api')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pullWar')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "pullCurrentWar",
						"description": "call clash api /clans for given CLAN_TAG param",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "pl_api",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SRC_REL_URL": {
									"value": "@concat(\n    'clans/',\n    pipeline().parameters.CLAN_TAG,\n    '/currentwar'\n)",
									"type": "Expression"
								},
								"TGT_DIR": "clash/stg/wars/",
								"TGT_FILE_NM": {
									"value": "@concat(\n    'wardata_',\n    utcnow(),\n    '.json'\n)",
									"type": "Expression"
								},
								"JOB_TIME": {
									"value": "@pipeline().parameters.JOB_TIME",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"CLAN_TAG": {
						"type": "string",
						"defaultValue": "#P02CUUUU"
					},
					"JOB_TIME": {
						"type": "string"
					}
				},
				"folder": {
					"name": "clash/pull/endpoints"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pl_api')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/r2f_invoices')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "r2f_invoice_creation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "r2f_spotify_sub_users_invoice_creation",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SpotifyUsers": {},
									"InvoiceTarget": {},
									"TargetUserAccounts": {},
									"Invoices": {},
									"SpotifyUserAccounts": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse",
							"continuationSettings": {
								"customizedCheckpointKey": "096ef6dc-f66e-4bb7-8329-47b6e82f5ed8"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "spotify"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-17T03:43:06Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/r2f_spotify_sub_users_invoice_creation')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/r2r_invoice_subCharges')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "monthly sub charges",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "r2r_monthly_sub_charges",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"userAccLog": {},
									"subCharges": {},
									"monthlySubCharges": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse",
							"continuationSettings": {
								"customizedCheckpointKey": "79658ea1-c548-4394-898c-a0b8657e72d5"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "spotify"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/r2r_monthly_sub_charges')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/r2r_new_invoices')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "r2r_new_invoices",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "r2r_new_invoices",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"userAccounts": {},
									"userAccountsLog": {},
									"subAccounts": {},
									"Invoices": {},
									"AddInvoices": {},
									"InvoiceUserlogLookup": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse",
							"continuationSettings": {
								"customizedCheckpointKey": "a431e8e1-46f3-419c-b43d-d7ef9c3c1dcc"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "spotify"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/r2r_new_invoices')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/s2r_spotify_accounts')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "s2pr_spotify_accounts",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "s2pr_spotify_accounts_cdc",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"spotifyAccounts": {},
									"TargetUserAccounts": {},
									"UserAccounts": {},
									"AccountsStaging": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine",
							"continuationSettings": {
								"customizedCheckpointKey": "9850c893-9587-4a92-b48a-3c7ae7a809b0"
							}
						}
					},
					{
						"name": "pr2r_spotify_accounts",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "s2pr_spotify_accounts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "pr2r_spotify_accounts",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SpotifyUsersStaging": {},
									"UserAccountsLookup": {},
									"RawUserAccountsKeys": {},
									"RawUserAccountsLog": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Coarse"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "spotify"
				},
				"annotations": [],
				"lastPublishTime": "2023-01-22T19:21:59Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/s2pr_spotify_accounts_cdc')]",
				"[concat(variables('workspaceId'), '/dataflows/pr2r_spotify_accounts')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Binary1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "spotify-scrape-dev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "test4",
						"folderPath": "stg/table/2023/inbound",
						"fileSystem": "premtracker"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/spotify-scrape-dev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "spotify-scrape-dev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "retry.csv",
						"folderPath": "stg/table/2023/inbound",
						"fileSystem": "premtracker"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/spotify-scrape-dev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DestinationDataset_kcs')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "spotify-scrape-dev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "stg/table/2023/inbound",
						"fileSystem": "premtracker"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/spotify-scrape-dev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/RestResource1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_clash_restapi",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"URL_REL": {
						"type": "string",
						"defaultValue": "clans/%23P02CUUUU"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "@dataset().URL_REL",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_clash_restapi')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SourceDataset_kcs')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "spotify-scrape-dev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "stg/table/2023/archive",
						"fileSystem": "premtracker"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/spotify-scrape-dev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/clan_ds_json')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "spotify-scrape-dev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TGT_DIR": {
						"type": "string",
						"defaultValue": "clash/clan/"
					},
					"TGT_FILE_NM": {
						"type": "string",
						"defaultValue": "test_result.json"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().TGT_FILE_NM",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().TGT_DIR",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/spotify-scrape-dev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_csv_bbcstg_format')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "spotify-scrape-dev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FILE_SYS": {
						"type": "string"
					},
					"DIR": {
						"type": "string"
					},
					"FILE_NM": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FILE_NM",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().DIR",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().FILE_SYS",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/spotify-scrape-dev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_csv_gen')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "spotify-scrape-dev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FILE_SYS": {
						"type": "string"
					},
					"DIR": {
						"type": "string"
					},
					"FILE_NM": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FILE_NM",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().DIR",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().FILE_SYS",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/spotify-scrape-dev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_json_gen')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "spotify-scrape-dev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FILE_SYS": {
						"type": "string",
						"defaultValue": "clash"
					},
					"DIR": {
						"type": "string",
						"defaultValue": "stg/clan"
					},
					"FILE_NM": {
						"type": "string",
						"defaultValue": "clandata_2023-05-26T04:30:32.3798450Z.json"
					}
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FILE_NM",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().DIR",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().FILE_SYS",
							"type": "Expression"
						}
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/spotify-scrape-dev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_parquet_gen')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "spotify-scrape-dev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FILE_SYS": {
						"type": "string"
					},
					"DIR": {
						"type": "string"
					},
					"FILE_NM": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FILE_NM",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().DIR",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().FILE_SYS",
							"type": "Expression"
						}
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/spotify-scrape-dev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_webtbl_bbcprem')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_premtracker_bbcpremstandings",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "WebTable",
				"schema": [],
				"typeProperties": {
					"index": 0,
					"path": "sport/football/premier-league/table"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_premtracker_bbcpremstandings')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_webtbl_skysportsprem')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ls_webtbl_premtable_skysports",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"YEAR": {
						"type": "string",
						"defaultValue": "2023"
					}
				},
				"annotations": [],
				"type": "WebTable",
				"schema": [],
				"typeProperties": {
					"index": 0,
					"path": {
						"value": "@dataset().YEAR",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/ls_webtbl_premtable_skysports')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/raw_spotify_subs_accounts')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "spotify-scrape-dev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "raw/spotify_subs_accounts",
						"fileSystem": "sys"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "active_ts",
						"type": "INT96"
					},
					{
						"name": "member_type",
						"type": "UTF8"
					},
					{
						"name": "sub_id",
						"type": "INT64"
					},
					{
						"name": "username",
						"type": "UTF8"
					},
					{
						"name": "inbound_file_name",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/spotify-scrape-dev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/spotify_accounts_staging')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "spotify-scrape-dev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "staging/spotify_account_user_log",
						"fileSystem": "spotifyfam"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/spotify-scrape-dev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/spotify_sub_acc_inbound')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "spotify-scrape-dev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "inbound",
						"fileSystem": "spotifyfam"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/spotify-scrape-dev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/subscription_charges')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "spotify-scrape-dev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "raw/sub_charges_monthly",
						"fileSystem": "sys"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "id",
						"type": "INT64"
					},
					{
						"name": "sub_id",
						"type": "INT64"
					},
					{
						"name": "year",
						"type": "INT64"
					},
					{
						"name": "month",
						"type": "INT64"
					},
					{
						"name": "created_at",
						"type": "UTF8"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/spotify-scrape-dev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/user_account_log')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "spotify-scrape-dev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "raw/user_accounts_log",
						"fileSystem": "sys"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "user_id",
						"type": "INT64"
					},
					{
						"name": "sub_id",
						"type": "INT64"
					},
					{
						"name": "username",
						"type": "UTF8"
					},
					{
						"name": "member_type",
						"type": "UTF8"
					},
					{
						"name": "active_ts",
						"type": "INT96"
					},
					{
						"name": "inbound_file_name",
						"type": "UTF8"
					},
					{
						"name": "id",
						"type": "INT64"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/spotify-scrape-dev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Sheets')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "GoogleSheets",
				"typeProperties": {
					"apiToken": {
						"type": "SecureString",
						"value": "[parameters('Sheets_apiToken')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/adls_bqtest')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('adls_bqtest_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/gcs')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "GoogleCloudStorage",
				"typeProperties": {
					"serviceUrl": "https://storage.googleapis.com",
					"accessKeyId": "[parameters('gcs_properties_typeProperties_accessKeyId')]",
					"secretAccessKey": {
						"type": "SecureString",
						"value": "[parameters('gcs_secretAccessKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/google_sheets')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "GoogleSheets",
				"typeProperties": {
					"apiToken": {
						"type": "SecureString",
						"value": "[parameters('google_sheets_apiToken')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_clash_restapi')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "ls connection using self hosted ir\nbearer token from ClashDB project secret script",
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('ls_clash_restapi_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous",
					"authHeaders": {
						"Accept": {
							"type": "SecureString",
							"value": "**********"
						},
						"authorization": {
							"type": "SecureString",
							"value": "**********"
						}
					}
				},
				"connectVia": {
					"referenceName": "clash-SHIR-laptop",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/clash-SHIR-laptop')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_kv_appcreds')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ls_kv_appcreds_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_premtracker_bbcpremstandings')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "Web",
				"typeProperties": {
					"url": "[parameters('ls_premtracker_bbcpremstandings_properties_typeProperties_url')]",
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "clash-SHIR-laptop",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/clash-SHIR-laptop')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ls_webtbl_premtable_skysports')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "Web",
				"typeProperties": {
					"url": "[parameters('ls_webtbl_premtable_skysports_properties_typeProperties_url')]",
					"authenticationType": "Anonymous"
				},
				"connectVia": {
					"referenceName": "clash-SHIR-laptop",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/clash-SHIR-laptop')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/previous_premlake')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('previous_premlake_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/spotify-scrape-dev-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('spotify-scrape-dev-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/spotify-scrape-dev-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('spotify-scrape-dev-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/clash_s2r_cdc')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "clash_s2r_cdc",
							"type": "PipelineReference"
						},
						"parameters": {
							"SRC_DIR": "[parameters('clash_s2r_cdc_properties_clash_s2r_cdc_parameters_SRC_DIR')]",
							"SRC_FILE_NM": "[parameters('clash_s2r_cdc_properties_clash_s2r_cdc_parameters_SRC_FILE_NM')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/clash/blobs/stg/",
					"blobPathEndsWith": ".json",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('clash_s2r_cdc_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/clash_s2r_cdc')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/clash_s_r_pullClan')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pullClanData",
							"type": "PipelineReference"
						},
						"parameters": {
							"CLAN_TAG": "[parameters('clash_s_r_pullClan_properties_pullClanData_parameters_CLAN_TAG')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 12,
						"startTime": "2023-05-23T00:00:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pullClanData')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/r2r_invoice_creation')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "r2r_new_invoices",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 2,
						"startTime": "2023-02-05T00:08:00Z",
						"timeZone": "UTC",
						"schedule": {
							"weekDays": [
								"Tuesday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/r2r_new_invoices')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/s2r_weekly_spotify_accounts')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "s2r_spotify_accounts",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Week",
						"interval": 1,
						"startTime": "2023-01-20T01:45:00Z",
						"timeZone": "UTC",
						"schedule": {
							"hours": [
								2
							],
							"weekDays": [
								"Friday"
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/s2r_spotify_accounts')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/tr_premtracker_master')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pl_premtracker_standings_master",
							"type": "PipelineReference"
						},
						"parameters": {
							"YEAR": "[parameters('tr_premtracker_master_properties_pl_premtracker_standings_master_parameters_YEAR')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2025-08-15T00:00:00",
						"endTime": "2026-06-01T00:00:00",
						"timeZone": "Eastern Standard Time",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								14,
								20
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/pl_premtracker_standings_master')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/clash-SHIR-laptop')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_pr2r')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "clash/generic"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "spotify-scrape-dev-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "spotify-scrape-dev-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     TGT_FILE_SYS as string,",
						"     TGT_DIR_LOC as string,",
						"     SRC_FILE_SYS as string,",
						"     SRC_DIR_LOC as string",
						"}",
						"source(useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     enableCdc: true,",
						"     mode: 'read',",
						"     skipInitialLoad: false,",
						"     format: 'json',",
						"     fileSystem: ($SRC_FILE_SYS),",
						"     folderPath: ($SRC_DIR_LOC),",
						"     documentForm: 'documentPerLine') ~> source1",
						"source1 derive(load_date = currentDate(),",
						"          load_ts = currentTimestamp()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: ($TGT_FILE_SYS),",
						"     folderPath: ($TGT_DIR_LOC),",
						"     mergeSchema: false,",
						"     autoCompact: false,",
						"     optimizedWrite: false,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('key',",
						"          0,",
						"          load_date",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/spotify-scrape-dev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_premtracker_draftboard_s2r')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "premtracker"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "Sheets",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "spotify-scrape-dev-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "renameColumns"
						}
					],
					"scriptLines": [
						"parameters{",
						"     YEAR as string ('2022'),",
						"     SHEET_ID as string ('1DeiwYigE0YNqW6Rw7_h4NBABs4yFRsDLdKAKaF8Pwus')",
						"}",
						"source(output(",
						"          column_1 as string,",
						"          column_2 as string,",
						"          column_3 as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     store: 'googlesheets',",
						"     format: 'rest',",
						"     spreadSheetId: ($SHEET_ID),",
						"     startCell: 'A2',",
						"     endCell: 'C21',",
						"     sheetName: 'Draft Board',",
						"     timestampFormats: ['yyyy.MM.dd HH:mm:ss']) ~> source1",
						"renameColumns derive(season = $YEAR,",
						"          load_date = currentDate('UTC')) ~> derivedColumn1",
						"source1 select(mapColumn(",
						"          Team = column_1,",
						"          Player = column_2,",
						"          Pick = column_3",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> renameColumns",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'premtracker_raw',",
						"     tableName: 'draftboard',",
						"     partitionBy('key',",
						"          0,",
						"          load_date",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/Sheets')]",
				"[concat(variables('workspaceId'), '/linkedServices/spotify-scrape-dev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_premtracker_r2f')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "premtracker"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "spotify-scrape-dev-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "table"
						},
						{
							"name": "draftboard"
						}
					],
					"sinks": [
						{
							"name": "sink1"
						},
						{
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select2"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "derivedColumn3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Position as short,",
						"          Team as string,",
						"          Pl as short,",
						"          W as short,",
						"          D as short,",
						"          L as short,",
						"          F as short,",
						"          A as short,",
						"          GD as short,",
						"          Pts as short,",
						"          current_ts as timestamp,",
						"          season as short,",
						"          load_date as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     enableCdc: true,",
						"     mode: 'read',",
						"     skipInitialLoad: false,",
						"     format: 'parquet',",
						"     fileSystem: 'sys',",
						"     folderPath: 'synapse/workspaces/spotify-scrape-dev/warehouse/premtracker_raw.db/table') ~> table",
						"source(output(",
						"          Team as string,",
						"          Player as string,",
						"          Pick as short,",
						"          season as short,",
						"          load_date as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'premtracker_raw',",
						"     tableName: 'draftboard') ~> draftboard",
						"table, draftboard join(table@Team == draftboard@Team",
						"     && table@season == draftboard@season,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"derivedColumn2 select(mapColumn(",
						"          Position,",
						"          Team = table@Team,",
						"          Pl,",
						"          W,",
						"          D,",
						"          L,",
						"          F,",
						"          A,",
						"          GD,",
						"          Pts,",
						"          current_ts,",
						"          season = table@season,",
						"          load_date,",
						"          Team = draftboard@Team,",
						"          Player,",
						"          Pick,",
						"          season = draftboard@season",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 aggregate(groupBy(Player,",
						"          season,",
						"          current_ts),",
						"     PointTotal = sum(Pts),",
						"          MatchTotal = sum(Pl),",
						"          WinTotal = sum(W),",
						"          DrawTotal = sum(D),",
						"          LossTotal = sum(L),",
						"          GoalsForTotal = sum(F),",
						"          GoalsAgainstTotal = sum(A),",
						"          GoalDiffTotal = sum(GD)) ~> aggregate1",
						"select1 derive(PickValue = Pick - Position) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Position,",
						"          Team,",
						"          Player,",
						"          Pick,",
						"          PickValue,",
						"          Points = Pts,",
						"          Matches = Pl,",
						"          Wins = W,",
						"          Draws = D,",
						"          Losses = L,",
						"          GoalsFor = F,",
						"          GoalsAgainst = A,",
						"          GoalDiff = GD,",
						"          Season = season,",
						"          current_ts,",
						"          load_date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"join1 derive(load_date = currentDate('UTC')) ~> derivedColumn2",
						"aggregate1 derive(load_date = currentDate('UTC')) ~> derivedColumn3",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'premtracker_foundation',",
						"     tableName: 'standings') ~> sink1",
						"derivedColumn3 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'premtracker_foundation',",
						"     tableName: 'player_totals') ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/spotify-scrape-dev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_premtracker_r2f_mock1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "premtracker"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "spotify-scrape-dev-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "table"
						},
						{
							"name": "draftboard"
						}
					],
					"sinks": [
						{
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select2"
						},
						{
							"name": "join2"
						},
						{
							"name": "derivedColumn3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Position as short,",
						"          Team as string,",
						"          Pl as short,",
						"          W as short,",
						"          D as short,",
						"          L as short,",
						"          F as short,",
						"          A as short,",
						"          GD as short,",
						"          Pts as short,",
						"          current_ts as timestamp,",
						"          season as short,",
						"          load_date as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     enableCdc: true,",
						"     mode: 'read',",
						"     skipInitialLoad: false,",
						"     format: 'parquet',",
						"     fileSystem: 'sys',",
						"     folderPath: 'synapse/workspaces/spotify-scrape-dev/warehouse/premtracker_raw.db/table') ~> table",
						"source(output(",
						"          Team as string,",
						"          Player as string,",
						"          Pick as short,",
						"          season as short,",
						"          load_date as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'premtracker_raw',",
						"     tableName: 'draftboard') ~> draftboard",
						"derivedColumn3, draftboard join(derivedColumn3@Team == draftboard@Team",
						"     && table@season == draftboard@season,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          Position,",
						"          Team = derivedColumn3@Team,",
						"          Pl,",
						"          W,",
						"          D,",
						"          L,",
						"          F,",
						"          A,",
						"          GD,",
						"          Pts,",
						"          current_ts,",
						"          season = table@season,",
						"          load_date = derivedColumn3@load_date,",
						"          Team = draftboard@Team,",
						"          Player,",
						"          Pick,",
						"          season = draftboard@season",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 aggregate(groupBy(Player,",
						"          season,",
						"          current_ts),",
						"     PointTotal = sum(Pts),",
						"          MatchTotal = sum(Pl),",
						"          WinTotal = sum(W),",
						"          DrawTotal = sum(D),",
						"          LossTotal = sum(L),",
						"          GoalsForTotal = sum(F),",
						"          GoalsAgainstTotal = sum(A),",
						"          GoalDiffTotal = sum(GD)) ~> aggregate1",
						"select1 derive(PickValue = Pick - Position) ~> derivedColumn1",
						"join2 select(mapColumn(",
						"          Position,",
						"          Season = select1@season,",
						"          Team,",
						"          Player,",
						"          Pick,",
						"          PickValue,",
						"          Points = Pts,",
						"          Matches = Pl,",
						"          Wins = W,",
						"          Draws = D,",
						"          Losses = L,",
						"          GoalsFor = F,",
						"          GoalsAgainst = A,",
						"          GoalDiff = GD,",
						"          PointTotal,",
						"          MatchTotal,",
						"          WinTotal,",
						"          DrawTotal,",
						"          LossTotal,",
						"          GoalsForTotal,",
						"          GoalsAgainstTotal,",
						"          GoalDiffTotal,",
						"          load_date,",
						"          current_ts = select1@current_ts",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"derivedColumn1, aggregate1 join(select1@season == aggregate1@season",
						"     && select1@Player == aggregate1@Player",
						"     && select1@current_ts == aggregate1@current_ts,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"table derive(Team = trim(replace(Team, \"*\", \"\")),",
						"          load_date = currentDate('UTC')) ~> derivedColumn3",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'premtracker_foundation',",
						"     tableName: 'standings_mock1',",
						"     partitionBy('key',",
						"          0,",
						"          Season,",
						"          current_ts",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/spotify-scrape-dev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/df_premtracker_table_s2r')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "premtracker"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "spotify-scrape-dev-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "spotify-scrape-dev-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "rank1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     YEAR as string ('2023')",
						"}",
						"source(useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: [('stg/table/'+$YEAR+'/inbound'),('stg/table/'+$YEAR+'/archive')],",
						"     format: 'delimited',",
						"     fileSystem: 'premtracker',",
						"     folderPath: ('stg/table/' + $YEAR),",
						"     fileName: 'inbound',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     timestampFormats: ['yyyy.MM.dd HH:mm:ss'],",
						"     preferredIntegralType: 'integer',",
						"     booleanFormat: ['True', 'False']) ~> source1",
						"rank1 derive(load_date = currentDate('UTC')) ~> derivedColumn1",
						"source1 filter(!isNull(byName('Pl'))) ~> filter1",
						"filter1 derive(Team = replace(toString(byName('Team')), '\"', '')) ~> derivedColumn2",
						"derivedColumn2 rank(desc(toInteger(byName('Pts')), true),",
						"     desc(toInteger(byName('GD')), true),",
						"     desc(toInteger(byName('F')), true),",
						"     output(Position as long)) ~> rank1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'premtracker_raw',",
						"     tableName: 'table',",
						"     partitionBy('key',",
						"          0,",
						"          load_date",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/spotify-scrape-dev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pr2r')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "clash"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "spotify-scrape-dev-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "spotify-scrape-dev-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     SRC_DIR as string (\"clash\"),",
						"     SRC_FN as string (\"clan\"),",
						"     TGT_DIR as string (\"deltalake/raw/clan/\")",
						"}",
						"source(useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     ignoreNoFilesFound: false,",
						"     enableCdc: true,",
						"     mode: 'read',",
						"     skipInitialLoad: false,",
						"     rowUrlColumn: 'stg_file_nm',",
						"     format: 'json',",
						"     fileSystem: ($SRC_DIR),",
						"     folderPath: ($SRC_FN),",
						"     documentForm: 'documentPerLine') ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delta',",
						"     fileSystem: 'clash',",
						"     folderPath: ($TGT_DIR),",
						"     mergeSchema: true,",
						"     autoCompact: true,",
						"     optimizedWrite: true,",
						"     vacuum: 0,",
						"     deletable: false,",
						"     insertable: true,",
						"     updateable: false,",
						"     upsertable: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/spotify-scrape-dev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pr2r_spotify_accounts')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "spotify"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "spotify_accounts_staging",
								"type": "DatasetReference"
							},
							"name": "SpotifyUsersStaging"
						},
						{
							"name": "UserAccountsLookup"
						},
						{
							"name": "RawUserAccountsKeys"
						}
					],
					"sinks": [
						{
							"name": "RawUserAccountsLog"
						}
					],
					"transformations": [
						{
							"name": "SelectCompositeKeys"
						},
						{
							"name": "joinUserID"
						},
						{
							"name": "select1"
						},
						{
							"name": "AddLogID"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "tempColumn"
						},
						{
							"name": "LogMaxID"
						},
						{
							"name": "AddMaxLogID"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          active_ts as timestamp,",
						"          member_type as string,",
						"          sub_id as long,",
						"          username as string,",
						"          inbound_file_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: true,",
						"     purgeFiles: true,",
						"     modifiedAfter: (toTimestamp(1674345600000L)),",
						"     format: 'parquet') ~> SpotifyUsersStaging",
						"source(output(",
						"          id as long,",
						"          sub_id as long,",
						"          username as string,",
						"          member_type as string,",
						"          created_at as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'raw',",
						"     tableName: 'user_accounts') ~> UserAccountsLookup",
						"source(output(",
						"          user_id as long,",
						"          sub_id as long,",
						"          username as string,",
						"          member_type as string,",
						"          active_ts as timestamp,",
						"          inbound_file_name as string,",
						"          id as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'raw',",
						"     tableName: 'user_accounts_log') ~> RawUserAccountsKeys",
						"UserAccountsLookup select(mapColumn(",
						"          user_id = id,",
						"          sub_id,",
						"          username,",
						"          member_type",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCompositeKeys",
						"SpotifyUsersStaging, SelectCompositeKeys join(SpotifyUsersStaging@sub_id == SelectCompositeKeys@sub_id",
						"     && SpotifyUsersStaging@username == SelectCompositeKeys@username",
						"     && SpotifyUsersStaging@member_type == SelectCompositeKeys@member_type,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinUserID",
						"joinUserID select(mapColumn(",
						"          user_id,",
						"          sub_id = SpotifyUsersStaging@sub_id,",
						"          username = SpotifyUsersStaging@username,",
						"          member_type = SpotifyUsersStaging@member_type,",
						"          active_ts,",
						"          inbound_file_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 keyGenerate(output(id as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> AddLogID",
						"tempColumn aggregate(groupBy(temp),",
						"     maxID = max(id)) ~> aggregate1",
						"RawUserAccountsKeys derive(temp = 'temp') ~> tempColumn",
						"aggregate1 select(mapColumn(",
						"          maxID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> LogMaxID",
						"AddLogID, LogMaxID join(true(),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> AddMaxLogID",
						"AddMaxLogID derive(id = id + maxID) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          id,",
						"          user_id,",
						"          sub_id,",
						"          username,",
						"          member_type,",
						"          active_ts,",
						"          inbound_file_name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'raw',",
						"     tableName: 'user_accounts_log') ~> RawUserAccountsLog"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/spotify_accounts_staging')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/r2f_invoice_key_lookup')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "spotify"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "TargetUserAccounts"
						}
					],
					"sinks": [
						{
							"name": "maxAccountID"
						},
						{
							"name": "AccountCompositeLookup"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "select1"
						},
						{
							"name": "AccountCompositeKeys"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as long,",
						"          sub_id as long,",
						"          username as string,",
						"          member_type as string,",
						"          created_timestamp as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'foundation',",
						"     tableName: 'spotify_user_accounts') ~> TargetUserAccounts",
						"TargetUserAccounts derive(temp = 'temp') ~> derivedColumn1",
						"derivedColumn1 aggregate(groupBy(temp),",
						"     maxAccountID = max(id)) ~> aggregate1",
						"aggregate1 select(mapColumn(",
						"          maxAccountID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"TargetUserAccounts aggregate(groupBy(sub_id,",
						"          username,",
						"          member_type),",
						"     count = count()) ~> AccountCompositeKeys",
						"select1 sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 0) ~> maxAccountID",
						"AccountCompositeKeys sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 0) ~> AccountCompositeLookup"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/r2f_spotify_sub_users_invoice_creation')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "spotify"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "raw_spotify_subs_accounts",
								"type": "DatasetReference"
							},
							"name": "SpotifyUsers"
						},
						{
							"name": "InvoiceTarget"
						},
						{
							"name": "TargetUserAccounts"
						}
					],
					"sinks": [
						{
							"name": "Invoices"
						},
						{
							"name": "SpotifyUserAccounts"
						}
					],
					"transformations": [
						{
							"name": "CreateInvoices"
						},
						{
							"name": "AddInvoiceDetails"
						},
						{
							"name": "SelectInvoiceColumns"
						},
						{
							"name": "checkInvoices"
						},
						{
							"name": "GetUsers"
						},
						{
							"name": "BaseKeyVals"
						},
						{
							"name": "AddIDandColumns"
						},
						{
							"name": "GetMaxID"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "MaxUserID"
						},
						{
							"name": "UserCompositeKeys"
						},
						{
							"name": "CheckUserComposite"
						},
						{
							"name": "JoinMaxUserID"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          active_ts as timestamp,",
						"          member_type as string,",
						"          sub_id as long,",
						"          username as string,",
						"          inbound_file_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     enableCdc: true,",
						"     mode: 'read',",
						"     skipInitialLoad: false,",
						"     format: 'parquet') ~> SpotifyUsers",
						"source(output(",
						"          year as integer,",
						"          month as integer,",
						"          sub_id as long,",
						"          test as long,",
						"          last_day_of_month as date,",
						"          description as string,",
						"          invoiced as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'foundation',",
						"     tableName: 'invoices') ~> InvoiceTarget",
						"source(output(",
						"          id as long,",
						"          sub_id as long,",
						"          username as string,",
						"          member_type as string,",
						"          created_timestamp as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'foundation',",
						"     tableName: 'spotify_user_accounts') ~> TargetUserAccounts",
						"SpotifyUsers aggregate(groupBy(year = year(active_ts),",
						"          month = month(active_ts),",
						"          sub_id),",
						"     test = approxDistinctCount(active_ts)) ~> CreateInvoices",
						"checkInvoices derive(last_day_of_month = lastDayOfMonth((toDate(toString(year) + \"-\" + toString(month), \"yyyy-M\", 'en-US'))),",
						"          description = 'Monthly spotify Invoice',",
						"          invoiced = 'N') ~> AddInvoiceDetails",
						"AddInvoiceDetails select(mapColumn(",
						"          year,",
						"          month,",
						"          sub_id,",
						"          last_day_of_month,",
						"          description,",
						"          invoiced",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInvoiceColumns",
						"CreateInvoices, InvoiceTarget exists(CreateInvoices@year == InvoiceTarget@year",
						"     && CreateInvoices@month == InvoiceTarget@month",
						"     && CreateInvoices@sub_id == InvoiceTarget@sub_id,",
						"     negate:true,",
						"     broadcast: 'auto')~> checkInvoices",
						"SpotifyUsers aggregate(groupBy(sub_id,",
						"          username,",
						"          member_type),",
						"     count = count()) ~> GetUsers",
						"CheckUserComposite keyGenerate(output(id as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> BaseKeyVals",
						"JoinMaxUserID derive(id = id + maxID,",
						"          created_at = currentTimestamp()) ~> AddIDandColumns",
						"derivedColumn2 aggregate(groupBy(temp),",
						"     maxID = max(id)) ~> GetMaxID",
						"TargetUserAccounts derive(temp = 'temp') ~> derivedColumn2",
						"GetMaxID select(mapColumn(",
						"          maxID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> MaxUserID",
						"TargetUserAccounts aggregate(groupBy(sub_id,",
						"          username,",
						"          member_type),",
						"     count = count()) ~> UserCompositeKeys",
						"GetUsers, UserCompositeKeys exists(GetUsers@sub_id == UserCompositeKeys@sub_id",
						"     && GetUsers@username == UserCompositeKeys@username",
						"     && GetUsers@member_type == UserCompositeKeys@member_type,",
						"     negate:true,",
						"     broadcast: 'auto')~> CheckUserComposite",
						"BaseKeyVals, MaxUserID join(true(),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMaxUserID",
						"AddIDandColumns select(mapColumn(",
						"          sub_id,",
						"          username,",
						"          member_type,",
						"          id,",
						"          created_at",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"SelectInvoiceColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'foundation',",
						"     tableName: 'invoices') ~> Invoices",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'foundation',",
						"     tableName: 'spotify_user_accounts') ~> SpotifyUserAccounts"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/raw_spotify_subs_accounts')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/r2r_monthly_sub_charges')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "spotify"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "user_account_log",
								"type": "DatasetReference"
							},
							"name": "userAccLog"
						},
						{
							"name": "subCharges"
						}
					],
					"sinks": [
						{
							"name": "monthlySubCharges"
						}
					],
					"transformations": [
						{
							"name": "monthlySubs"
						},
						{
							"name": "newSubCharges"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select1"
						},
						{
							"name": "DefaultIDs"
						},
						{
							"name": "MaxID"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "GetMaxIDs"
						}
					],
					"scriptLines": [
						"source(output(",
						"          user_id as long,",
						"          sub_id as long,",
						"          username as string,",
						"          member_type as string,",
						"          active_ts as timestamp,",
						"          inbound_file_name as string,",
						"          id as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     enableCdc: true,",
						"     mode: 'read',",
						"     skipInitialLoad: false,",
						"     format: 'parquet') ~> userAccLog",
						"source(output(",
						"          id as long,",
						"          sub_id as long,",
						"          year as long,",
						"          month as long,",
						"          created_at as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'raw',",
						"     tableName: 'sub_charges_monthly') ~> subCharges",
						"userAccLog aggregate(groupBy(sub_id,",
						"          year = year(active_ts),",
						"          month = month(active_ts)),",
						"     temp = count()) ~> monthlySubs",
						"monthlySubs, subCharges exists(monthlySubs@sub_id == subCharges@sub_id",
						"     && monthlySubs@year == subCharges@year",
						"     && monthlySubs@month == subCharges@month,",
						"     negate:true,",
						"     broadcast: 'auto')~> newSubCharges",
						"GetMaxIDs derive(created_at = currentTimestamp(),",
						"          id = id + maxID) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          id,",
						"          sub_id,",
						"          year,",
						"          month,",
						"          created_at",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"newSubCharges keyGenerate(output(id as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> DefaultIDs",
						"derivedColumn2 aggregate(groupBy(temp),",
						"     maxID = max(id)) ~> MaxID",
						"subCharges derive(temp = 'temp') ~> derivedColumn2",
						"DefaultIDs, MaxID join(true(),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> GetMaxIDs",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'raw',",
						"     tableName: 'sub_charges_monthly') ~> monthlySubCharges"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/user_account_log')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/r2r_new_invoices')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "spotify"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"name": "userAccounts"
						},
						{
							"dataset": {
								"referenceName": "user_account_log",
								"type": "DatasetReference"
							},
							"name": "userAccountsLog"
						},
						{
							"name": "subAccounts"
						},
						{
							"name": "Invoices"
						}
					],
					"sinks": [
						{
							"name": "AddInvoices"
						},
						{
							"name": "InvoiceUserlogLookup"
						}
					],
					"transformations": [
						{
							"name": "JoinAccountsLog"
						},
						{
							"name": "MinMaxTimes"
						},
						{
							"name": "CreateActuatlEndDate"
						},
						{
							"name": "JoinSubInfo"
						},
						{
							"name": "DefaultInvoiceID"
						},
						{
							"name": "SelectInvoiceDetails"
						},
						{
							"name": "statusColumns"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "maxInvoiceID"
						},
						{
							"name": "GetMaxID"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "split1"
						},
						{
							"name": "LogIDtoInvoiceID"
						},
						{
							"name": "cast1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as long,",
						"          sub_id as long,",
						"          username as string,",
						"          member_type as string,",
						"          created_at as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'raw',",
						"     tableName: 'user_accounts') ~> userAccounts",
						"source(output(",
						"          user_id as long,",
						"          sub_id as long,",
						"          username as string,",
						"          member_type as string,",
						"          active_ts as timestamp,",
						"          inbound_file_name as string,",
						"          id as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     enableCdc: true,",
						"     mode: 'read',",
						"     skipInitialLoad: false,",
						"     format: 'parquet') ~> userAccountsLog",
						"source(output(",
						"          active_flag as string,",
						"          id as long,",
						"          site as string,",
						"          spotify_username as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'raw',",
						"     tableName: 'sub_accounts') ~> subAccounts",
						"source(output(",
						"          id as long,",
						"          sub_id as long,",
						"          start_ts as timestamp,",
						"          end_date as timestamp,",
						"          status as string,",
						"          created_at as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'raw',",
						"     tableName: 'invoices') ~> Invoices",
						"userAccounts, userAccountsLog join(userAccounts@id == user_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinAccountsLog",
						"split1@NoLinkableInvoice aggregate(groupBy(sub_id),",
						"     start_ts = min(active_ts),",
						"          end_ts = max(active_ts)) ~> MinMaxTimes",
						"JoinSubInfo derive(end_ts = iif(monthsBetween(end_ts, start_ts) < 6, lastDayOfMonth(addMonths(start_ts, 6)),  lastDayOfMonth(end_ts))) ~> CreateActuatlEndDate",
						"MinMaxTimes, subAccounts join(sub_id == id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinSubInfo",
						"cast1 keyGenerate(output(id as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> DefaultInvoiceID",
						"derivedColumn2 select(mapColumn(",
						"          id,",
						"          sub_id,",
						"          start_date = start_ts,",
						"          end_date = end_ts",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInvoiceDetails",
						"SelectInvoiceDetails derive(status = 'active',",
						"          created_at = currentTimestamp()) ~> statusColumns",
						"JoinAccountsLog, Invoices join(active_ts >= start_ts",
						"     && active_ts < end_date,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'right')~> join1",
						"join1 select(mapColumn(",
						"          user_id = userAccounts@id,",
						"          sub_id = userAccounts@sub_id,",
						"          username = userAccounts@username,",
						"          member_type = userAccounts@member_type,",
						"          created_at = userAccounts@created_at,",
						"          user_id,",
						"          sub_id = userAccountsLog@sub_id,",
						"          username = userAccountsLog@username,",
						"          member_type = userAccountsLog@member_type,",
						"          active_ts,",
						"          inbound_file_name,",
						"          user_log_id = userAccountsLog@id,",
						"          invoice_id = Invoices@id,",
						"          sub_id = Invoices@sub_id,",
						"          start_ts,",
						"          end_date,",
						"          status,",
						"          created_at = Invoices@created_at",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"Invoices derive(temp = 'temp') ~> derivedColumn1",
						"derivedColumn1 aggregate(groupBy(temp),",
						"     maxID = max(id)) ~> aggregate1",
						"aggregate1 select(mapColumn(",
						"          maxID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> maxInvoiceID",
						"DefaultInvoiceID, maxInvoiceID join(true(),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> GetMaxID",
						"GetMaxID derive(id = id + maxID) ~> derivedColumn2",
						"select1 split(isNull(invoice_id),",
						"     disjoint: false) ~> split1@(NoLinkableInvoice, LinkableInvoice)",
						"split1@LinkableInvoice select(mapColumn(",
						"          invoice_id,",
						"          user_log_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> LogIDtoInvoiceID",
						"CreateActuatlEndDate cast(output(",
						"          end_ts as timestamp 'MM/dd/yyyy HH:mm:ss'",
						"     ),",
						"     errors: true) ~> cast1",
						"statusColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'raw',",
						"     tableName: 'invoices') ~> AddInvoices",
						"LogIDtoInvoiceID sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'raw',",
						"     tableName: 'invoice_to_userlog') ~> InvoiceUserlogLookup"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/user_account_log')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/s2pr_spotify_accounts_cdc')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "spotify"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "spotify_sub_acc_inbound",
								"type": "DatasetReference"
							},
							"name": "spotifyAccounts"
						},
						{
							"name": "TargetUserAccounts"
						}
					],
					"sinks": [
						{
							"name": "UserAccounts"
						},
						{
							"dataset": {
								"referenceName": "spotify_accounts_staging",
								"type": "DatasetReference"
							},
							"name": "AccountsStaging"
						}
					],
					"transformations": [
						{
							"name": "castTimestamp"
						},
						{
							"name": "GetUsers"
						},
						{
							"name": "UserCompositeKeys"
						},
						{
							"name": "tempColumn"
						},
						{
							"name": "GetMaxID"
						},
						{
							"name": "MaxUserID"
						},
						{
							"name": "CheckUserCompositeKeys"
						},
						{
							"name": "BaseKeyVals"
						},
						{
							"name": "JoinMaxUserID"
						},
						{
							"name": "AddIDandColumns"
						},
						{
							"name": "ReOrderColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          active_ts as string,",
						"          member_type as string,",
						"          sub_id as long,",
						"          username as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     enableCdc: true,",
						"     mode: 'read',",
						"     skipInitialLoad: false,",
						"     rowUrlColumn: 'inbound_file_name',",
						"     documentForm: 'documentPerLine') ~> spotifyAccounts",
						"source(output(",
						"          id as long,",
						"          sub_id as long,",
						"          username as string,",
						"          member_type as string,",
						"          created_at as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'raw',",
						"     tableName: 'user_accounts') ~> TargetUserAccounts",
						"spotifyAccounts cast(output(",
						"          active_ts as timestamp 'yyyy.MM.dd HH:mm:ss'",
						"     ),",
						"     errors: true) ~> castTimestamp",
						"castTimestamp aggregate(groupBy(sub_id,",
						"          username,",
						"          member_type),",
						"     count = count()) ~> GetUsers",
						"TargetUserAccounts aggregate(groupBy(sub_id,",
						"          username,",
						"          member_type),",
						"     count = count() + 1) ~> UserCompositeKeys",
						"TargetUserAccounts derive(temp = 'temp') ~> tempColumn",
						"tempColumn aggregate(groupBy(temp),",
						"     id = count()) ~> GetMaxID",
						"GetMaxID select(mapColumn(",
						"          maxID = id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> MaxUserID",
						"GetUsers, UserCompositeKeys exists(GetUsers@sub_id == UserCompositeKeys@sub_id",
						"     && GetUsers@username == UserCompositeKeys@username",
						"     && GetUsers@member_type == UserCompositeKeys@member_type,",
						"     negate:true,",
						"     broadcast: 'auto')~> CheckUserCompositeKeys",
						"CheckUserCompositeKeys keyGenerate(output(id as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> BaseKeyVals",
						"BaseKeyVals, MaxUserID join(true(),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinMaxUserID",
						"JoinMaxUserID derive(id = id + maxID,",
						"          created_at = currentTimestamp()) ~> AddIDandColumns",
						"AddIDandColumns select(mapColumn(",
						"          id,",
						"          sub_id,",
						"          username,",
						"          member_type,",
						"          created_at",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> ReOrderColumns",
						"ReOrderColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     store: 'synapse',",
						"     databaseType: 'spark',",
						"     format: 'table',",
						"     database: 'raw',",
						"     tableName: 'user_accounts') ~> UserAccounts",
						"castTimestamp sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> AccountsStaging"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/spotify_sub_acc_inbound')]",
				"[concat(variables('workspaceId'), '/datasets/spotify_accounts_staging')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Due Invoices')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Spotify"
				},
				"content": {
					"query": "SELECT TOP (100) [year]\n,[month]\n,[sub_id]\n,[last_day_of_month]\n,[description]\n,[invoiced]\n FROM [foundation].[dbo].[invoices]\n WHERE [last_day_of_month] < CURRENT_TIMESTAMP AND [invoiced] = 'N'\n ORDER BY [last_day_of_month] ASC\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "foundation",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [Player]\n,[season]\n,[current_ts]\n,[PointTotal]\n,[MatchTotal]\n,[WinTotal]\n,[DrawTotal]\n,[LossTotal]\n,[GoalsForTotal]\n,[GoalsAgainstTotal]\n,[GoalDiffTotal]\n,[load_date]\n FROM [premtracker_foundation].[dbo].[player_totals]\n WHERE current_ts = (SELECT MAX(current_ts) FROM [premtracker_foundation].[dbo].[player_totals])\n ORDER BY pointTotal desc, GoalDiffTotal desc",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "premtracker_foundation",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 3')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT current_ts, count(*)\nFROM premtracker_foundation.dbo.player_totals\nGROUP BY current_ts",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "premtracker_foundation",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 4')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) [Position]\n,[Season]\n,[Team]\n,[Player]\n,[Pick]\n,[PickValue]\n,[Points]\n,[Matches]\n,[Wins]\n,[Draws]\n,[Losses]\n,[GoalsFor]\n,[GoalsAgainst]\n,[GoalDiff]\n,[PointTotal]\n,[MatchTotal]\n,[WinTotal]\n,[DrawTotal]\n,[LossTotal]\n,[GoalsForTotal]\n,[GoalsAgainstTotal]\n,[GoalDiffTotal]\n,[load_date]\n,[current_ts]\n FROM [premtracker_foundation].[dbo].[standings_mock1]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "premtracker_foundation",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SubAccounts')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Spotify"
				},
				"content": {
					"query": "SELECT [subs].[id] subID, [subs].[site] as subSite, [subs].[spotify_username] subSpotifyUsername, [accounts].[id] accountID, [accounts].[username] accountUsername, [accounts].[member_type] accountMemberType, [accounts].[created_timestamp] createTs\n FROM [foundation].[dbo].[spotify_user_accounts] [accounts]\n JOIN [raw].[dbo].[spotify_sub_accs] [subs]\n    ON accounts.sub_id = subs.id",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "foundation",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/clanView')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT TOP (100) api_call_ts,\nbadgeUrls\ncapitalLeague,\nchatLanguage,\nclanBuilderBasePoints,\nclanCapital,\nclanLevel,\nclanPoints,\nclanVersusPoints,\ndescription,\nisFamilyFriendly,\nisWarLogPublic,\nlabels,\nlocation,\n--memberList,\nmembers,\nname,\nrequiredBuilderBaseTrophies,\nrequiredTownhallLevel,\nrequiredTrophies,\nrequiredVersusTrophies,\ntag,\ntype, \nwarfrequency,\nwarLeague, \nwarWinStreak, \nwarWins\n FROM [clash_raw].[dbo].[clan]\nWHERE api_call_ts is not null order by api_call_ts desc",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "clash_raw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sub_accounts_log')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Spotify"
				},
				"content": {
					"query": "SELECT *\n FROM [raw].[dbo].[sub_accounts] s\n JOIN raw.dbo.user_accounts ua\n    ON s.id = ua.sub_id\n JOIN raw.dbo.user_accounts_log ual\n    ON ua.id = ual.user_id\n ORDER BY user_id DESC, active_ts DESC",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "raw",
						"poolName": "Built-in"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/alter_accounts')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "spotify"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "smallspark0",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "8abcda2a-11af-49bb-8a0b-a453f909fb90"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/6cb2d3f3-d909-494e-8c69-03fc31778b22/resourceGroups/spotify-fam/providers/Microsoft.Synapse/workspaces/spotify-scrape-dev/bigDataPools/smallspark0",
						"name": "smallspark0",
						"type": "Spark",
						"endpoint": "https://spotify-scrape-dev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/smallspark0",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"SELECT * FROM raw.sub_accounts"
						],
						"outputs": [],
						"execution_count": 15
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df = spark.sql('SELECT * FROM raw.sub_accounts')"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import lit"
						],
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df = df.withColumn('type', lit('Family Plan')).withColumn('monthly_rate', lit(18.09)).withColumn('billing_months', lit(6)).withColumn('fee_rate', lit(.06))"
						],
						"outputs": [],
						"execution_count": 31
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(df)"
						],
						"outputs": [],
						"execution_count": 38
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"#df.write.mode('overwrite').saveAsTable('raw.sub_accounts')\r\n",
							"\r\n",
							"temp = df.collect()\r\n",
							"temp = spark.createDataFrame(temp)"
						],
						"outputs": [],
						"execution_count": 46
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"temp.write.mode('overwrite').saveAsTable('raw.sub_accounts')"
						],
						"outputs": [],
						"execution_count": 47
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/convert_hist')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "premtracker"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "medspark0",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "7114dcc9-68b2-4b29-b3d5-1d7e2a7cf9bb"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/6cb2d3f3-d909-494e-8c69-03fc31778b22/resourceGroups/spotify-fam/providers/Microsoft.Synapse/workspaces/spotify-scrape-dev/bigDataPools/medspark0",
						"name": "medspark0",
						"type": "Spark",
						"endpoint": "https://spotify-scrape-dev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/medspark0",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"df = spark.read.format('delta').load('abfss://raw@premlake.dfs.core.windows.net/seasons/2022/standings/')"
						],
						"outputs": [],
						"execution_count": 29
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import col, lit\r\n",
							"\r\n",
							"# Position\r\n",
							"# Team\r\n",
							"# Pl\r\n",
							"# W\r\n",
							"# D\r\n",
							"# L\r\n",
							"# F\r\n",
							"# A\r\n",
							"# GD\r\n",
							"# Pts\r\n",
							"# current_ts\r\n",
							"# season\r\n",
							"\r\n",
							"df = df.select(\r\n",
							"        col(\"position\").alias(\"Position\"),\r\n",
							"        col(\"name\").alias(\"Team\"),\r\n",
							"        col(\"matchesPlayed\").alias(\"Pl\"),\r\n",
							"        col(\"wins\").alias(\"W\"),\r\n",
							"        col(\"draws\").alias(\"D\"),\r\n",
							"        col(\"losses\").alias(\"L\"),\r\n",
							"        col(\"goalsFor\").alias(\"F\"),\r\n",
							"        col(\"goalsAgainst\").alias(\"A\"),\r\n",
							"        col(\"goalDifferential\").alias(\"GD\"),\r\n",
							"        col(\"points\").alias(\"Pts\"),\r\n",
							"        col(\"load_date\").alias(\"current_ts\")\r\n",
							"    ).withColumn('season', lit(2022))"
						],
						"outputs": [],
						"execution_count": 31
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"from pyspark.sql.functions import date_format\r\n",
							"\r\n",
							"# yyyy.MM.dd HH:mm:ss\r\n",
							"\r\n",
							"df = df.withColumn('current_ts', date_format('current_ts', 'yyyy.MM.dd HH:mm:ss'))"
						],
						"outputs": [],
						"execution_count": 33
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(df)"
						],
						"outputs": [],
						"execution_count": 34
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"\r\n",
							"out_df = df.filter(df.current_ts == load.current_ts)\r\n",
							"\r\n",
							"df.repartition(1, 'current_ts').write.mode('overwrite').csv(f'abfss://premtracker@spotifyfam.dfs.core.windows.net/stg/table/2022/inbound/', header=True)\r\n",
							""
						],
						"outputs": [],
						"execution_count": 48
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/create_accounts')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "spotify"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"runAsWorkspaceSystemIdentity": false,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "08dc56c2-fb7c-45bf-a103-38b8ed0a3fe5"
					}
				},
				"metadata": {
					"saveOutput": true,
					"synapse_widget": {
						"version": "0.1"
					},
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "python"
					},
					"language_info": {
						"name": "python"
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"subs = [\r\n",
							"    {\r\n",
							"        'id': 0,\r\n",
							"        'site': 'Spotify',\r\n",
							"        'spotify_username': 'danjam',\r\n",
							"        'active_flag' : 'Y'\r\n",
							"    }\r\n",
							"]\r\n",
							"\r\n",
							"df = spark.createDataFrame(subs)\r\n",
							"\r\n",
							"df.write.mode('overwrite').format('parquet').saveAsTable('raw.spotify_sub_accs')"
						],
						"outputs": []
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/draftboard_team_rename')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "premtracker"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "smallspark0",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "e5f21a03-47d0-472f-a189-0e805e03b8be"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "sql"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/6cb2d3f3-d909-494e-8c69-03fc31778b22/resourceGroups/spotify-fam/providers/Microsoft.Synapse/workspaces/spotify-scrape-dev/bigDataPools/smallspark0",
						"name": "smallspark0",
						"type": "Spark",
						"endpoint": "https://spotify-scrape-dev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/smallspark0",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.2",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"collapsed": false
						},
						"source": [
							"SELECT 1"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TABLE premtracker_raw.draftboard_bkp AS SELECT * FROM premtracker_raw.draftboard"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"SELECT * FROM premtracker_raw.draftboard WHERE"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"DROP TABLE premtracker_raw.draftboard"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TABLE premtracker_raw.draftboard AS \r\n",
							"SELECT\r\n",
							"    CASE Team\r\n",
							"       WHEN 'Brighton and Hove Albion' THEN 'Brighton & Hove Albion'\r\n",
							"       WHEN 'Bournemouth' THEN 'AFC Bournemouth'\r\n",
							"       ELSE Team\r\n",
							"    END as Team,\r\n",
							"    Player,\r\n",
							"    Pick,\r\n",
							"    season,\r\n",
							"    load_date\r\n",
							"FROM premtracker_raw.draftboard_bkp"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"--CREATE TABLE premtracker_foundation.standings_mock1_bkp AS\r\n",
							"SELECT * FROM premtracker_foundation.standings_mock1"
						],
						"outputs": [],
						"execution_count": 27
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"DROP TABLE premtracker_foundation.standings_mock1"
						],
						"outputs": [],
						"execution_count": 25
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TABLE premtracker_foundation.standings_mock1 AS\r\n",
							"SELECT\r\n",
							"    Position,\r\n",
							"    Season,\r\n",
							"    CASE Team\r\n",
							"       WHEN 'Brighton and Hove Albion' THEN 'Brighton & Hove Albion'\r\n",
							"       WHEN 'Bournemouth' THEN 'AFC Bournemouth'\r\n",
							"       ELSE Team\r\n",
							"    END as Team,\r\n",
							"    Player,\r\n",
							"    Pick,\r\n",
							"    PickValue,\r\n",
							"    Points,\r\n",
							"    Matches,\r\n",
							"    Wins,\r\n",
							"    Draws,\r\n",
							"    Losses,\r\n",
							"    GoalsFor,\r\n",
							"    GoalsAgainst,\r\n",
							"    GoalDiff,\r\n",
							"    PointTotal,\r\n",
							"    MatchTotal,\r\n",
							"    WinTotal,\r\n",
							"    DrawTotal,\r\n",
							"    LossTotal,\r\n",
							"    GoalsForTotal,\r\n",
							"    GoalsAgainstTotal,\r\n",
							"    GoalDiffTotal,\r\n",
							"    load_date,\r\n",
							"    current_ts\r\n",
							"FROM premtracker_foundation.standings_mock1_bkp"
						],
						"outputs": [],
						"execution_count": 26
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"DESCRIBE TABLE EXTENDED premtracker_foundation.standings_mock1"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/nb_scrape')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "premtracker/scrape"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "medspark0",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "a1ea3a7b-69cb-4629-9503-013dd5ff44ed"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/6cb2d3f3-d909-494e-8c69-03fc31778b22/resourceGroups/spotify-fam/providers/Microsoft.Synapse/workspaces/spotify-scrape-dev/bigDataPools/medspark0",
						"name": "medspark0",
						"type": "Spark",
						"endpoint": "https://spotify-scrape-dev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/medspark0",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"tags": [
								"parameters"
							]
						},
						"source": [
							"YEAR = '2023'"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"import requests\r\n",
							"from bs4 import BeautifulSoup\r\n",
							"from pyspark.sql.types import StructType, StructField, StringType, IntegerType\r\n",
							"\r\n",
							"\r\n",
							"# Define the URL to scrape\r\n",
							"url = f\"https://www.skysports.com/premier-league-table/{YEAR}\"\r\n",
							"\r\n",
							"# Send an HTTP GET request to the URL\r\n",
							"response = requests.get(url)\r\n",
							"\r\n",
							"# Check if the request was successful\r\n",
							"if response.status_code == 200:\r\n",
							"    # Parse the HTML content of the page\r\n",
							"    soup = BeautifulSoup(response.text, \"html.parser\")\r\n",
							"    \r\n",
							"    # Find the table containing the Premier League standings\r\n",
							"    table = soup.find(\"table\", {\"class\": \"standing-table__table\"})\r\n",
							"    \r\n",
							"    # Define the schema for the Spark DataFrame\r\n",
							"    schema = StructType([\r\n",
							"        StructField(\"Position\", IntegerType(), True),\r\n",
							"        StructField(\"Team\", StringType(), True),\r\n",
							"        StructField(\"Played\", IntegerType(), True),\r\n",
							"        StructField(\"Won\", IntegerType(), True),\r\n",
							"        StructField(\"Drawn\", IntegerType(), True),\r\n",
							"        StructField(\"Lost\", IntegerType(), True),\r\n",
							"        StructField(\"GF\", IntegerType(), True),\r\n",
							"        StructField(\"GA\", IntegerType(), True),\r\n",
							"        StructField(\"GD\", IntegerType(), True),\r\n",
							"        StructField(\"Points\", IntegerType(), True)\r\n",
							"    ])\r\n",
							"    \r\n",
							"    # Extract data from the table and create a list of rows\r\n",
							"    rows = []\r\n",
							"    for row in table.find(\"tbody\").find_all(\"tr\"):\r\n",
							"        cols = row.find_all(\"td\")\r\n",
							"        data = [int(cols[0].text.strip()), cols[1].text.strip(), int(cols[2].text.strip()),\r\n",
							"                int(cols[3].text.strip()), int(cols[4].text.strip()), int(cols[5].text.strip()),\r\n",
							"                int(cols[6].text.strip()), int(cols[7].text.strip()), int(cols[8].text.strip()),\r\n",
							"                int(cols[9].text.strip())]\r\n",
							"        rows.append(data)\r\n",
							"    \r\n",
							"    # Create a Spark DataFrame\r\n",
							"    df = spark.createDataFrame(rows, schema=schema)\r\n",
							"\r\n",
							"    display(df)"
						],
						"outputs": [],
						"execution_count": 13
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/read raw')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "clash"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "smallspark33",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "704a783e-e31f-40cb-bb72-242d29f532fa"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/6cb2d3f3-d909-494e-8c69-03fc31778b22/resourceGroups/spotify-fam/providers/Microsoft.Synapse/workspaces/spotify-scrape-dev/bigDataPools/smallspark33",
						"name": "smallspark33",
						"type": "Spark",
						"endpoint": "https://spotify-scrape-dev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/smallspark33",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"df = spark.read.table('clash_raw.clans')"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(df)"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"temp_data_cdc = spark.read.load(\r\n",
							"    path = 'abfss://clash@spotifyfam.dfs.core.windows.net/stg/wars/',\r\n",
							"    format='json'\r\n",
							")"
						],
						"outputs": [],
						"execution_count": 14
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"display(temp_data_cdc.select('clan.name'))"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"CREATE SCHEMA clash_test_cdc"
						],
						"outputs": [],
						"execution_count": 19
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"temp_data_cdc.write.format('delta').option(\"delta.enableChangeDataFeed\", \"true\").saveAsTable('clash_test_cdc.clan')"
						],
						"outputs": [],
						"execution_count": 24
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"temp_data_cdc.write.saveAsTable()"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"SHOW TBLPROPERTIES clash_raw.wars"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"DESCRIBE HISTORY clash_test_cdc.clan"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "python"
							},
							"collapsed": false
						},
						"source": [
							"%%pyspark\r\n",
							" \r\n",
							"df = spark.read.format(\"delta\") \\\r\n",
							"  .option(\"readChangeFeed\", \"true\") \\\r\n",
							"  .option(\"startingTimestamp\", '2023-05-26T04:36:51Z') \\\r\n",
							"  .table(\"clash_test_cdc.clan\")\r\n",
							" \r\n",
							"display(df)"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"out = df.select(\r\n",
							"    'api_call_ts', 'tag', 'name', 'clanLevel', 'clanBuilderBasePoints', 'badgeUrls.large'\r\n",
							")\r\n",
							"\r\n",
							"display(out)"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"out.write.parquet('abfss://reports@testbq.dfs.core.windows.net/test/')"
						],
						"outputs": [],
						"execution_count": null
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"CREATE SCHEMA IF NOT EXISTS clash_raw"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"for table in mssparkutils.fs.ls('abfss://clash@spotifyfam.dfs.core.windows.net/deltalake/raw/'):\r\n",
							"    spark.sql(\r\n",
							"        f'CREATE EXTERNAL TABLE IF NOT EXISTS clash_raw.{table.name} USING DELTA OPTIONS (path=\"{table.path}\")'\r\n",
							"    )"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"DESCRIBE HISTORY clash_raw.clan"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"DROP TABLE clash_raw.cwl_wars"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"ALTER TABLE clash_raw.wars\r\n",
							"  SET TBLPROPERTIES (delta.enableChangeDataFeed = false);"
						],
						"outputs": [],
						"execution_count": 11
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"SELECT * FROM clash_raw.cwl"
						],
						"outputs": [],
						"execution_count": 12
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df = spark.read.format('delta') \\\r\n",
							"    .option(\"readChangeFeed\", \"true\") \\\r\n",
							"    .option(\"startingVersion\", 0) \\\r\n",
							"    .option(\"endingVersion\", 5) \\\r\n",
							"    .table(\"clash_raw.clan\")"
						],
						"outputs": [],
						"execution_count": 10
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/reconsile_duplicates')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "premtracker"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "medspark0",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "4c5ed44e-f62f-413e-85af-a75a8e39520e"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/6cb2d3f3-d909-494e-8c69-03fc31778b22/resourceGroups/spotify-fam/providers/Microsoft.Synapse/workspaces/spotify-scrape-dev/bigDataPools/medspark0",
						"name": "medspark0",
						"type": "Spark",
						"endpoint": "https://spotify-scrape-dev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/medspark0",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"print('hello')"
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"SELECT *\r\n",
							"FROM (\r\n",
							"    SELECT *,\r\n",
							"rank() OVER (PARTITION BY Team, current_ts ORDER BY load_date asc) as ranks\r\n",
							"FROM premtracker_foundation.standings_mock1 WHERE season == '2023'\r\n",
							")"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql\r\n",
							"\r\n",
							"REFRESH TABLE premtracker_foundation.standings_mock1"
						],
						"outputs": [],
						"execution_count": 12
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/reload_table_year')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "premtracker"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "medspark0",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "90b4c952-d9a3-4943-bd02-562ec5e8f3cf"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "sql"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/6cb2d3f3-d909-494e-8c69-03fc31778b22/resourceGroups/spotify-fam/providers/Microsoft.Synapse/workspaces/spotify-scrape-dev/bigDataPools/medspark0",
						"name": "medspark0",
						"type": "Spark",
						"endpoint": "https://spotify-scrape-dev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/medspark0",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"SELECT DISTINCT season FROM premtracker_raw.table"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"microsoft": {
								"language": "sparksql"
							},
							"collapsed": false
						},
						"source": [
							"%%sql \r\n",
							"\r\n",
							"CREATE TABLE premtracker_raw.temp_table AS SELECT * FROM premtracker_raw.table WHERE season != '2023'"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"SELECT DISTINCT season FROM premtracker_raw.temp_table"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"DROP TABLE premtracker_raw.table"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"CREATE TABLE premtracker_raw.table AS SELECT * FROM premtracker_raw.temp_table"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"SELECT DISTINCT season FROM premtracker_raw.table"
						],
						"outputs": [],
						"execution_count": 7
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": false
						},
						"source": [
							"DROP TABLE premtracker_raw.temp_table"
						],
						"outputs": [],
						"execution_count": 8
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/s2r_cdc')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "clash"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "smallspark33",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2",
						"spark.autotune.trackingId": "b528c7e8-04db-4a57-a5b2-709b43c0e402"
					}
				},
				"metadata": {
					"saveOutput": true,
					"enableDebugMode": false,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "python"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/6cb2d3f3-d909-494e-8c69-03fc31778b22/resourceGroups/spotify-fam/providers/Microsoft.Synapse/workspaces/spotify-scrape-dev/bigDataPools/smallspark33",
						"name": "smallspark33",
						"type": "Spark",
						"endpoint": "https://spotify-scrape-dev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/smallspark33",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.3",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					},
					"sessionKeepAliveTimeout": 30
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"tags": [
								"parameters"
							]
						},
						"source": [
							"SRC_DIR = 'clash/stg/clan'\r\n",
							"SRC_FILE_NM = 'clandata_2023-05-27T12:00:26.4776262Z.json'\r\n",
							"TGT_TBL_NM = 'clans_cdc test'"
						],
						"outputs": [],
						"execution_count": 18
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"# break up SRC DIR to generate ABFSS path\r\n",
							"SRC_CONTAINER_INDEX = SRC_DIR.find('/')\r\n",
							"\r\n",
							"# get container \r\n",
							"SRC_CONTAINER = SRC_DIR[:SRC_CONTAINER_INDEX]\r\n",
							"# get path after container\r\n",
							"SRC_PATH = SRC_DIR[SRC_CONTAINER_INDEX:]"
						],
						"outputs": [],
						"execution_count": 20
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"from pyspark.sql.functions import col"
						],
						"outputs": [],
						"execution_count": 21
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"file_path = f'abfss://{SRC_CONTAINER}@spotifyfam.dfs.core.windows.net{SRC_PATH}/{SRC_FILE_NM}'"
						],
						"outputs": [],
						"execution_count": 22
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"df = (\r\n",
							"    spark\r\n",
							"    .read\r\n",
							"    .load(file_path, format='json')\r\n",
							"    .withColumn('api_call_ts', col('api_call_ts').cast('TIMESTAMP'))\r\n",
							")"
						],
						"outputs": [],
						"execution_count": 23
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"tgt_tbl_path = f'abfss://clash@spotifyfam.dfs.core.windows.net/deltalake/raw/{TGT_TBL_NM}/'"
						],
						"outputs": [],
						"execution_count": 28
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							}
						},
						"source": [
							"(\r\n",
							"    df\r\n",
							"    .write\r\n",
							"    .mode('append')\r\n",
							"    .format('delta')\r\n",
							"    .option(\"delta.enableChangeDataFeed\", \"true\")\r\n",
							"    .save(tgt_tbl_path)\r\n",
							")"
						],
						"outputs": [],
						"execution_count": 26
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/foundation')]",
			"type": "Microsoft.Synapse/workspaces/databases",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"Ddls": [
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "foundation",
							"EntityType": "DATABASE",
							"Origin": {
								"Type": "SPARK"
							},
							"Properties": {
								"IsSyMSCDMDatabase": true
							},
							"Source": {
								"Provider": "ADLS",
								"Location": "abfss://sys@spotifyfam.dfs.core.windows.net/foundation",
								"Properties": {
									"FormatType": "parquet",
									"LinkedServiceName": "spotify-scrape-dev-WorkspaceDefaultStorage"
								}
							},
							"PublishStatus": "PUBLISHED",
							"ObjectVersion": 3,
							"ObjectId": "bc2ef57c-2107-4015-8260-523ee4ceec13"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "invoices",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "foundation",
								"DatabaseId": null
							},
							"Partitioning": {
								"PartitionFunctionType": null,
								"Keys": null
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "year",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										}
									},
									{
										"Name": "month",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "integer",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "integer"
											}
										}
									},
									{
										"Name": "sub_id",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										}
									},
									{
										"Name": "last_day_of_month",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "date",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "date"
											}
										}
									},
									{
										"Name": "description",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "invoiced",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									}
								],
								"ColumnSetEntityName": "263bf6aa-d974-4280-bfbc-59e4a69449f5",
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://sys@spotifyfam.dfs.core.windows.net/foundation/invoices",
										"FormatTypeSetToDatabaseDefault": false
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://sys@spotifyfam.dfs.core.windows.net/foundation/invoices",
									"Properties": {
										"LinkedServiceName": "",
										"LocationSetToDatabaseDefault": false
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": "trusted-service-user",
							"CreateTime": 1673854357,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"Transient_lastDdlTime": "1673854357",
								"DisplayFolderInfo": "{\"name\":\"Others\",\"colorCode\":\"\"}",
								"PrimaryKeys": "",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"year\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"month\",\"type\":\"integer\",\"nullable\":true,\"metadata\":{}},{\"name\":\"sub_id\",\"type\":\"long\",\"nullable\":true,\"metadata\":{}},{\"name\":\"last_day_of_month\",\"type\":\"date\",\"nullable\":true,\"metadata\":{}},{\"name\":\"description\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"invoiced\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}}]}",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.provider": "parquet",
								"spark.sql.create.version": "2.4.8.2.6.99.201-76361509"
							},
							"ObjectVersion": 2,
							"ObjectId": "70d9126e-b0ae-48dd-b5e2-433d73da79b5"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "spotify_user_accounts",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "foundation",
								"DatabaseId": null
							},
							"Partitioning": {
								"PartitionFunctionType": null,
								"Keys": null
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "id",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										}
									},
									{
										"Name": "sub_id",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										}
									},
									{
										"Name": "username",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "member_type",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "created_timestamp",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "timestamp",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "timestamp"
											}
										}
									}
								],
								"ColumnSetEntityName": "de2fce2b-d146-479f-a97a-b6b50921b5dc",
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://sys@spotifyfam.dfs.core.windows.net/foundation/spotify_user_accounts",
										"FormatTypeSetToDatabaseDefault": false
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://sys@spotifyfam.dfs.core.windows.net/foundation/spotify_user_accounts",
									"Properties": {
										"LinkedServiceName": "",
										"LocationSetToDatabaseDefault": false
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": "trusted-service-user",
							"CreateTime": 1673903828,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"Transient_lastDdlTime": "1673903828",
								"DisplayFolderInfo": "{\"name\":\"Others\",\"colorCode\":\"\"}",
								"PrimaryKeys": "id",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"id\",\"type\":\"long\",\"nullable\":false,\"metadata\":{}},{\"name\":\"sub_id\",\"type\":\"long\",\"nullable\":true,\"metadata\":{}},{\"name\":\"username\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"member_type\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"created_timestamp\",\"type\":\"timestamp\",\"nullable\":true,\"metadata\":{}}]}",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.provider": "parquet",
								"spark.sql.create.version": "2.4.8.2.6.99.201-76361509"
							},
							"ObjectVersion": 2,
							"ObjectId": "5bc1f125-a7c3-404b-aecb-cb1939c124a5"
						},
						"Source": {
							"Type": "SPARK"
						}
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/raw')]",
			"type": "Microsoft.Synapse/workspaces/databases",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"Ddls": [
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "raw",
							"EntityType": "DATABASE",
							"Origin": {
								"Type": "SPARK"
							},
							"Properties": {
								"IsSyMSCDMDatabase": true
							},
							"Source": {
								"Provider": "ADLS",
								"Location": "abfss://sys@spotifyfam.dfs.core.windows.net/raw",
								"Properties": {
									"FormatType": "parquet",
									"LinkedServiceName": "spotify-scrape-dev-WorkspaceDefaultStorage"
								}
							},
							"PublishStatus": "PUBLISHED",
							"ObjectVersion": 16,
							"ObjectId": "ae3f836a-0b85-4e07-b8e8-fa84c708c8a5"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "invoice_charges",
							"EntityType": "TABLE",
							"Namespace": {
								"DatabaseName": "raw"
							},
							"Description": "",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "id",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										}
									},
									{
										"Name": "invoicde_id",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										}
									},
									{
										"Name": "charge_id",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://sys@spotifyfam.dfs.core.windows.net/raw/invoice_charges",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://sys@spotifyfam.dfs.core.windows.net/raw/invoice_charges",
									"Properties": {
										"LinkedServiceName": "spotify-scrape-dev-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"Description": "",
								"DisplayFolderInfo": "{\"name\":\"Others\",\"colorCode\":\"\"}",
								"PrimaryKeys": "",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "invoices",
							"EntityType": "TABLE",
							"Namespace": {
								"DatabaseName": "raw"
							},
							"Description": "",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "id",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										}
									},
									{
										"Name": "sub_id",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										}
									},
									{
										"Name": "start_ts",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "timestamp",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"TimestampFormat": "YYYY-MM-DD HH:MM:SS.fffffffff",
												"HIVE_TYPE_STRING": "timestamp"
											}
										}
									},
									{
										"Name": "end_ts",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "timestamp",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"TimestampFormat": "YYYY-MM-DD HH:MM:SS.fffffffff",
												"HIVE_TYPE_STRING": "timestamp"
											}
										}
									},
									{
										"Name": "status",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "created_at",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "timestamp",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"TimestampFormat": "YYYY-MM-DD HH:MM:SS.fffffffff",
												"HIVE_TYPE_STRING": "timestamp"
											}
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://sys@spotifyfam.dfs.core.windows.net/raw/invoices",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://sys@spotifyfam.dfs.core.windows.net/raw/invoices",
									"Properties": {
										"LinkedServiceName": "spotify-scrape-dev-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"Description": "",
								"DisplayFolderInfo": "{\"name\":\"Others\",\"colorCode\":\"\"}",
								"PrimaryKeys": "",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "payment_request",
							"EntityType": "TABLE",
							"Namespace": {
								"DatabaseName": "raw"
							},
							"Description": "",
							"TableType": "EXTERNAL",
							"Origin": {
								"Type": "SPARK"
							},
							"StorageDescriptor": {
								"Columns": [
									{
										"Name": "id",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										}
									},
									{
										"Name": "stub_id",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										}
									}
								],
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://sys@spotifyfam.dfs.core.windows.net/raw/payment_request",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://sys@spotifyfam.dfs.core.windows.net/raw/payment_request",
									"Properties": {
										"LinkedServiceName": "spotify-scrape-dev-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{}}"
								},
								"Compressed": false,
								"IsStoredAsSubdirectories": false
							},
							"Properties": {
								"Description": "",
								"DisplayFolderInfo": "{\"name\":\"Others\",\"colorCode\":\"\"}",
								"PrimaryKeys": "id",
								"spark.sql.sources.provider": "parquet"
							},
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "sub_accounts",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "raw",
								"DatabaseId": null
							},
							"Partitioning": {
								"PartitionFunctionType": null,
								"Keys": null
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "id",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										}
									},
									{
										"Name": "spotify_username",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "site",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "type",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 256,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "monthly_rate",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "double",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "double"
											}
										}
									},
									{
										"Name": "billing_months",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										}
									},
									{
										"Name": "active_flag",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									}
								],
								"ColumnSetEntityName": "8cca49b5-9252-4683-8be4-9bfe448182d6",
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://sys@spotifyfam.dfs.core.windows.net/raw/sub_accounts",
										"FormatTypeSetToDatabaseDefault": false
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://sys@spotifyfam.dfs.core.windows.net/raw/sub_accounts",
									"Properties": {
										"LinkedServiceName": "spotify-scrape-dev-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": false
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": "trusted-service-user",
							"CreateTime": 1673844878,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"Transient_lastDdlTime": "1673844878",
								"DisplayFolderInfo": "{\"name\":\"Others\",\"colorCode\":\"\"}",
								"PrimaryKeys": "id",
								"spark.sql.sources.schema": "{\"type\":\"struct\",\"fields\":[{\"name\":\"active_flag\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"id\",\"type\":\"long\",\"nullable\":true,\"metadata\":{}},{\"name\":\"site\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"spotify_username\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}}]}",
								"spark.sql.sources.provider": "parquet",
								"spark.sql.create.version": "3.2.2.5.1-75622951",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"id\",\"type\":\"long\",\"nullable\":false,\"metadata\":{}},{\"name\":\"site\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"spotify_username\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"active_flag\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}}]}",
								"spark.sql.partitionProvider": "catalog"
							},
							"ObjectVersion": 3,
							"ObjectId": "3db4e52c-c901-431d-8d34-63972d448d7d"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "user_accounts",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "raw",
								"DatabaseId": null
							},
							"Partitioning": {
								"PartitionFunctionType": null,
								"Keys": null
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "id",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										}
									},
									{
										"Name": "sub_id",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										}
									},
									{
										"Name": "username",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "member_type",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "created_at",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "timestamp",
											"IsComplexType": false,
											"IsNullable": true,
											"Properties": {
												"HIVE_TYPE_STRING": "timestamp"
											}
										}
									}
								],
								"ColumnSetEntityName": "d0bca2a1-8f65-40cb-acd7-02ada6e6561c",
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://sys@spotifyfam.dfs.core.windows.net/raw/user_accounts",
										"FormatTypeSetToDatabaseDefault": false
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://sys@spotifyfam.dfs.core.windows.net/raw/user_accounts",
									"Properties": {
										"LinkedServiceName": "",
										"LocationSetToDatabaseDefault": false
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": "trusted-service-user",
							"CreateTime": 1674104699,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"Transient_lastDdlTime": "1674104699",
								"DisplayFolderInfo": "{\"name\":\"Others\",\"colorCode\":\"\"}",
								"PrimaryKeys": "id",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"id\",\"type\":\"long\",\"nullable\":false,\"metadata\":{}},{\"name\":\"sub_id\",\"type\":\"long\",\"nullable\":true,\"metadata\":{}},{\"name\":\"username\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"member_type\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}},{\"name\":\"created_at\",\"type\":\"timestamp\",\"nullable\":true,\"metadata\":{}}]}",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.provider": "parquet",
								"spark.sql.create.version": "2.4.8.2.6.99.201-76361509"
							},
							"ObjectVersion": 3,
							"ObjectId": "74b9fa44-900e-43fd-8a42-ae6b99229526"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "user_accounts_log",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "raw",
								"DatabaseId": null
							},
							"Partitioning": {
								"PartitionFunctionType": null,
								"Keys": null
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "id",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										}
									},
									{
										"Name": "user_id",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										}
									},
									{
										"Name": "active_ts",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "timestamp",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "timestamp"
											}
										}
									},
									{
										"Name": "inbound_file_name",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": true,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									}
								],
								"ColumnSetEntityName": "7c6aa476-c8e0-4d1a-92c0-f2f2b382b4d4",
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://sys@spotifyfam.dfs.core.windows.net/raw/user_accounts_log",
										"FormatTypeSetToDatabaseDefault": false
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://sys@spotifyfam.dfs.core.windows.net/raw/user_accounts_log",
									"Properties": {
										"LinkedServiceName": "spotify-scrape-dev-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": false
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": "trusted-service-user",
							"CreateTime": 1674413641,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"Transient_lastDdlTime": "1674413641",
								"DisplayFolderInfo": "{\"name\":\"Others\",\"colorCode\":\"\"}",
								"PrimaryKeys": "id",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"id\",\"type\":\"long\",\"nullable\":false,\"metadata\":{}},{\"name\":\"user_id\",\"type\":\"long\",\"nullable\":true,\"metadata\":{}},{\"name\":\"active_ts\",\"type\":\"timestamp\",\"nullable\":true,\"metadata\":{}},{\"name\":\"inbound_file_name\",\"type\":\"string\",\"nullable\":true,\"metadata\":{}}]}",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.provider": "parquet",
								"spark.sql.create.version": "2.4.8.2.6.99.201-76361509"
							},
							"ObjectVersion": 4,
							"ObjectId": "cae7a70a-67ae-4bee-bb69-e9213ea390c7"
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "user_payment_info",
							"EntityType": "TABLE",
							"TableType": "EXTERNAL",
							"Namespace": {
								"SchemaName": null,
								"DatabaseName": "raw",
								"DatabaseId": null
							},
							"Partitioning": {
								"PartitionFunctionType": null,
								"Keys": null
							},
							"StorageDescriptor": {
								"Distribution": null,
								"Columns": [
									{
										"Name": "id",
										"Description": null,
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										}
									},
									{
										"Name": "user_id",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "long",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 0,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "long"
											}
										}
									},
									{
										"Name": "site",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 256,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									},
									{
										"Name": "username",
										"Description": "",
										"OriginDataTypeName": {
											"TypeName": "string",
											"IsComplexType": false,
											"IsNullable": false,
											"Length": 256,
											"Precision": 0,
											"Scale": 0,
											"Properties": {
												"HIVE_TYPE_STRING": "string"
											}
										}
									}
								],
								"ColumnSetEntityName": "d1cbe65f-3d31-412a-ac0c-d523b82fc5f8",
								"Format": {
									"InputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetInputFormat",
									"OutputFormat": "org.apache.hadoop.hive.ql.io.parquet.MapredParquetOutputFormat",
									"FormatType": "parquet",
									"SerializeLib": "org.apache.hadoop.hive.ql.io.parquet.serde.ParquetHiveSerDe",
									"Properties": {
										"path": "abfss://sys@spotifyfam.dfs.core.windows.net/raw/user_payment_info",
										"FormatTypeSetToDatabaseDefault": true
									}
								},
								"Source": {
									"Provider": "ADLS",
									"Location": "abfss://sys@spotifyfam.dfs.core.windows.net/raw/user_payment_info",
									"Properties": {
										"LinkedServiceName": "spotify-scrape-dev-WorkspaceDefaultStorage",
										"LocationSetToDatabaseDefault": true
									}
								},
								"Properties": {
									"textinputformat.record.delimiter": ",",
									"compression": "{\"type\":\"None\",\"level\":\"optimal\"}",
									"derivedModelAttributeInfo": "{\"attributeReferences\":{}}"
								},
								"Compressed": false,
								"SerDeInfo": null,
								"IsStoredAsSubdirectories": false
							},
							"Owner": null,
							"CreateTime": 0,
							"LastAccessTime": 0,
							"Retention": 0,
							"Temporary": false,
							"IsRewriteEnabled": false,
							"ViewOriginalText": null,
							"ViewExpandedText": null,
							"Origin": {
								"Type": "SPARK"
							},
							"OriginObjectId": null,
							"IsSharedEntity": false,
							"PublishStatus": "PUBLISHED",
							"Properties": {
								"Description": "",
								"DisplayFolderInfo": "{\"name\":\"Others\",\"colorCode\":\"\"}",
								"PrimaryKeys": "id",
								"spark.sql.sources.provider": "parquet",
								"spark.sql.sources.schema.numParts": "1",
								"spark.sql.sources.schema.part.0": "{\"type\":\"struct\",\"fields\":[{\"name\":\"id\",\"type\":\"long\",\"nullable\":false,\"metadata\":{}},{\"name\":\"user_id\",\"type\":\"long\",\"nullable\":false,\"metadata\":{}},{\"name\":\"site\",\"type\":\"string\",\"nullable\":false,\"metadata\":{}},{\"name\":\"username\",\"type\":\"string\",\"nullable\":false,\"metadata\":{}}]}"
							},
							"ObjectVersion": 1,
							"ObjectId": "14c5432e-cf72-4d80-b1de-406ea73c929d",
							"Description": ""
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "relationship-ezdafsywgg",
							"EntityType": "RELATIONSHIP",
							"Namespace": {
								"DatabaseName": "raw"
							},
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "sub_accounts",
							"ToTableName": "user_accounts",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "id",
									"ToColumnName": "sub_id"
								}
							],
							"RelationshipType": 0,
							"PublishStatus": "PUBLISHED",
							"ObjectVersion": 1,
							"ObjectId": "e21bb4d4-b082-42b4-869a-917bb73e4e1a",
							"Properties": {}
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "relationship-spolcyqyme",
							"EntityType": "RELATIONSHIP",
							"Namespace": {
								"DatabaseName": "raw"
							},
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "user_accounts",
							"ToTableName": "user_accounts_log",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "id",
									"ToColumnName": "user_id"
								}
							],
							"RelationshipType": 0,
							"PublishStatus": "PUBLISHED",
							"ObjectVersion": 1,
							"ObjectId": "50e6a481-ad53-4d7a-9887-bf1e8c3b22c4",
							"Properties": {}
						},
						"Source": {
							"Type": "SPARK"
						}
					},
					{
						"ActionType": "CREATE",
						"OldEntity": null,
						"NewEntity": {
							"Name": "relationship-ukqjkwizmw",
							"EntityType": "RELATIONSHIP",
							"Namespace": {
								"DatabaseName": "raw"
							},
							"Origin": {
								"Type": "SPARK"
							},
							"FromTableName": "user_accounts",
							"ToTableName": "user_payment_info",
							"ColumnRelationshipInformations": [
								{
									"FromColumnName": "id",
									"ToColumnName": "user_id"
								}
							],
							"RelationshipType": 0,
							"PublishStatus": "PUBLISHED",
							"ObjectVersion": 1,
							"ObjectId": "94ed837e-30dc-4605-be0d-3230d1c0b4fb",
							"Properties": {}
						},
						"Source": {
							"Type": "SPARK"
						}
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/smallspark0')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": false,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 3,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.2",
				"libraryRequirements": {
					"content": "splinter==0.18.1",
					"filename": "req.txt",
					"time": "2022-12-28T03:37:35.6378883Z"
				},
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "southcentralus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/medspark0')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 15
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 6,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.3",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": false,
				"annotations": []
			},
			"dependsOn": [],
			"location": "southcentralus"
		},
		{
			"name": "[concat(parameters('workspaceName'), '/smallspark33')]",
			"type": "Microsoft.Synapse/workspaces/bigDataPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"autoPause": {
					"enabled": true,
					"delayInMinutes": 10
				},
				"autoScale": {
					"enabled": true,
					"maxNodeCount": 10,
					"minNodeCount": 3
				},
				"nodeCount": 10,
				"nodeSize": "Small",
				"nodeSizeFamily": "MemoryOptimized",
				"sparkVersion": "3.3",
				"isComputeIsolationEnabled": false,
				"sessionLevelPackagesEnabled": true,
				"annotations": []
			},
			"dependsOn": [],
			"location": "southcentralus"
		}
	]
}