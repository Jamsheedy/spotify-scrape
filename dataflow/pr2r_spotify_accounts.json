{
	"name": "pr2r_spotify_accounts",
	"properties": {
		"folder": {
			"name": "spotify"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "spotify_accounts_staging",
						"type": "DatasetReference"
					},
					"name": "SpotifyUsersStaging"
				},
				{
					"name": "UserAccountsLookup"
				},
				{
					"name": "RawUserAccountsKeys"
				}
			],
			"sinks": [
				{
					"name": "RawUserAccountsLog"
				}
			],
			"transformations": [
				{
					"name": "SelectCompositeKeys"
				},
				{
					"name": "joinUserID"
				},
				{
					"name": "select1"
				},
				{
					"name": "AddLogID"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "tempColumn"
				},
				{
					"name": "LogMaxID"
				},
				{
					"name": "AddMaxLogID"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          active_ts as timestamp,",
				"          member_type as string,",
				"          sub_id as long,",
				"          username as string,",
				"          inbound_file_name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     purgeFiles: true,",
				"     modifiedAfter: (toTimestamp(1674345600000L)),",
				"     format: 'parquet') ~> SpotifyUsersStaging",
				"source(output(",
				"          id as long,",
				"          sub_id as long,",
				"          username as string,",
				"          member_type as string,",
				"          created_at as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'raw',",
				"     tableName: 'user_accounts') ~> UserAccountsLookup",
				"source(output(",
				"          user_id as long,",
				"          sub_id as long,",
				"          username as string,",
				"          member_type as string,",
				"          active_ts as timestamp,",
				"          inbound_file_name as string,",
				"          id as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'raw',",
				"     tableName: 'user_accounts_log') ~> RawUserAccountsKeys",
				"UserAccountsLookup select(mapColumn(",
				"          user_id = id,",
				"          sub_id,",
				"          username,",
				"          member_type",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectCompositeKeys",
				"SpotifyUsersStaging, SelectCompositeKeys join(SpotifyUsersStaging@sub_id == SelectCompositeKeys@sub_id",
				"     && SpotifyUsersStaging@username == SelectCompositeKeys@username",
				"     && SpotifyUsersStaging@member_type == SelectCompositeKeys@member_type,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinUserID",
				"joinUserID select(mapColumn(",
				"          user_id,",
				"          sub_id = SpotifyUsersStaging@sub_id,",
				"          username = SpotifyUsersStaging@username,",
				"          member_type = SpotifyUsersStaging@member_type,",
				"          active_ts,",
				"          inbound_file_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 keyGenerate(output(id as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> AddLogID",
				"tempColumn aggregate(groupBy(temp),",
				"     maxID = max(id)) ~> aggregate1",
				"RawUserAccountsKeys derive(temp = 'temp') ~> tempColumn",
				"aggregate1 select(mapColumn(",
				"          maxID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> LogMaxID",
				"AddLogID, LogMaxID join(true(),",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> AddMaxLogID",
				"AddMaxLogID derive(id = id + maxID) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          id,",
				"          user_id,",
				"          sub_id,",
				"          username,",
				"          member_type,",
				"          active_ts,",
				"          inbound_file_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'raw',",
				"     tableName: 'user_accounts_log') ~> RawUserAccountsLog"
			]
		}
	}
}