{
	"name": "Dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "spotify-scrape-dev-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "rosters"
				},
				{
					"linkedService": {
						"referenceName": "spotify-scrape-dev-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "rosterColumns"
				},
				{
					"name": "flattenRosterByPlayers"
				},
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"source(useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'json',",
				"     fileSystem: 'raw',",
				"     folderPath: 'sleeper/rosters',",
				"     fileName: 'rosters_992125474790772736_2024-07-17T03:38:12.2167244Z.json',",
				"     documentForm: 'documentPerLine') ~> rosters",
				"source(output(",
				"          birth_state as string,",
				"          opta_id as string,",
				"          pandascore_id as string,",
				"          injury_status as string,",
				"          espn_id as integer,",
				"          position as string,",
				"          news_updated as long,",
				"          sport as string,",
				"          fantasy_data_id as integer,",
				"          sportradar_id as string,",
				"          team as string,",
				"          birth_date as string,",
				"          team_abbr as string,",
				"          gsis_id as string,",
				"          rotoworld_id as integer,",
				"          injury_start_date as string,",
				"          depth_chart_position as string,",
				"          search_rank as integer,",
				"          practice_participation as string,",
				"          player_id as string,",
				"          yahoo_id as integer,",
				"          stats_id as integer,",
				"          search_full_name as string,",
				"          search_first_name as string,",
				"          practice_description as string,",
				"          number as integer,",
				"          injury_body_part as string,",
				"          oddsjam_id as string,",
				"          depth_chart_order as string,",
				"          swish_id as integer,",
				"          first_name as string,",
				"          age as integer,",
				"          status as string,",
				"          height as string,",
				"          high_school as string,",
				"          birth_country as string,",
				"          metadata as (rookie_year as string, channel_id as string),",
				"          weight as string,",
				"          years_exp as integer,",
				"          search_last_name as string,",
				"          rotowire_id as integer,",
				"          full_name as string,",
				"          injury_notes as string,",
				"          active as boolean,",
				"          hashtag as string,",
				"          last_name as string,",
				"          college as string,",
				"          fantasy_positions as string[],",
				"          competitions as string[],",
				"          birth_city as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     fileSystem: 'raw',",
				"     folderPath: 'sleeper',",
				"     fileName: 'players_parquet') ~> source1",
				"rosters derive(players = flatten(array(byName(\"players\"))),",
				"          roster_starters = flatten(array(byName(\"starters\"))),",
				"          roster_id = toString(byName(\"roster_id\")),",
				"          owner_id = toString(byName(\"owner_id\")),",
				"          league_id = toString(byName(\"league_id\")),",
				"          streak = toString(byItem(byName('metadata'), 'streak')),",
				"          record = toString(byItem(byName('metadata'), 'record')),",
				"          roster_wins = toShort(byItem(byName('settings'), 'wins')),",
				"          waiver_position = toShort(byItem(byName('settings'), 'waiver_position')),",
				"          waiver_budget_used = toShort(byItem(byName('settings'), 'waiver_budget_used')),",
				"          total_moves = toShort(byItem(byName('settings'), 'total_moves')),",
				"          roster_ties = toShort(byItem(byName('settings'), 'ties')),",
				"          roster_ppts_decimal = toShort(byItem(byName('settings'), 'ppts_decimal')),",
				"          roster_ppts = toShort(byItem(byName('settings'), 'ppts')),",
				"          roster_losses = toShort(byItem(byName('settings'), 'losses')),",
				"          fpts_decimal = toShort(byItem(byName('settings'), 'fpts_decimal')),",
				"          fpts_against_decimal = toShort(byItem(byName('settings'), 'fpts_against_decimal')),",
				"          fpts_against = toShort(byItem(byName('settings'), 'fpts_against')),",
				"          fpts = toShort(byItem(byName('settings'), 'fpts'))) ~> rosterColumns",
				"rosterColumns foldDown(unroll(players, players),",
				"     mapColumn(",
				"          players,",
				"          roster_starters,",
				"          roster_id,",
				"          owner_id,",
				"          league_id,",
				"          streak,",
				"          record,",
				"          roster_wins,",
				"          waiver_position,",
				"          waiver_budget_used,",
				"          total_moves,",
				"          roster_ties,",
				"          roster_ppts_decimal,",
				"          roster_ppts,",
				"          roster_losses,",
				"          fpts_decimal,",
				"          fpts_against_decimal,",
				"          fpts_against,",
				"          fpts",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flattenRosterByPlayers",
				"flattenRosterByPlayers, source1 join(toString(players) == player_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1"
			]
		}
	}
}