{
	"name": "s2pr_spotify_accounts_cdc",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "spotify_sub_acc_inbound",
						"type": "DatasetReference"
					},
					"name": "spotifyAccounts"
				},
				{
					"name": "TargetUserAccounts"
				}
			],
			"sinks": [
				{
					"name": "UserAccounts"
				},
				{
					"dataset": {
						"referenceName": "spotify_accounts_staging",
						"type": "DatasetReference"
					},
					"name": "AccountsStaging"
				}
			],
			"transformations": [
				{
					"name": "castTimestamp"
				},
				{
					"name": "GetUsers"
				},
				{
					"name": "UserCompositeKeys"
				},
				{
					"name": "tempColumn"
				},
				{
					"name": "GetMaxID"
				},
				{
					"name": "MaxUserID"
				},
				{
					"name": "CheckUserCompositeKeys"
				},
				{
					"name": "BaseKeyVals"
				},
				{
					"name": "JoinMaxUserID"
				},
				{
					"name": "AddIDandColumns"
				},
				{
					"name": "ReOrderColumns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          active_ts as string,",
				"          member_type as string,",
				"          sub_id as long,",
				"          username as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     enableCdc: true,",
				"     mode: 'read',",
				"     skipInitialLoad: false,",
				"     rowUrlColumn: 'inbound_file_name',",
				"     documentForm: 'documentPerLine') ~> spotifyAccounts",
				"source(output(",
				"          id as long,",
				"          sub_id as long,",
				"          username as string,",
				"          member_type as string,",
				"          created_at as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'raw',",
				"     tableName: 'user_accounts') ~> TargetUserAccounts",
				"spotifyAccounts cast(output(",
				"          active_ts as timestamp 'yyyy.MM.dd HH:mm:ss'",
				"     ),",
				"     errors: true) ~> castTimestamp",
				"castTimestamp aggregate(groupBy(sub_id,",
				"          username,",
				"          member_type),",
				"     count = count()) ~> GetUsers",
				"TargetUserAccounts aggregate(groupBy(sub_id,",
				"          username,",
				"          member_type),",
				"     count = count() + 1) ~> UserCompositeKeys",
				"TargetUserAccounts derive(temp = 'temp') ~> tempColumn",
				"tempColumn aggregate(groupBy(temp),",
				"     id = count()) ~> GetMaxID",
				"GetMaxID select(mapColumn(",
				"          maxID = id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> MaxUserID",
				"GetUsers, UserCompositeKeys exists(GetUsers@sub_id == UserCompositeKeys@sub_id",
				"     && GetUsers@username == UserCompositeKeys@username",
				"     && GetUsers@member_type == UserCompositeKeys@member_type,",
				"     negate:true,",
				"     broadcast: 'auto')~> CheckUserCompositeKeys",
				"CheckUserCompositeKeys keyGenerate(output(id as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> BaseKeyVals",
				"BaseKeyVals, MaxUserID join(true(),",
				"     joinType:'cross',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinMaxUserID",
				"JoinMaxUserID derive(id = id + maxID,",
				"          created_at = currentTimestamp()) ~> AddIDandColumns",
				"AddIDandColumns select(mapColumn(",
				"          id,",
				"          sub_id,",
				"          username,",
				"          member_type,",
				"          created_at",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ReOrderColumns",
				"ReOrderColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     store: 'synapse',",
				"     databaseType: 'spark',",
				"     format: 'table',",
				"     database: 'raw',",
				"     tableName: 'user_accounts') ~> UserAccounts",
				"castTimestamp sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> AccountsStaging"
			]
		}
	}
}